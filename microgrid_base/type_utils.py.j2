from log_utils import logger_print
from type_def import *

"""static & dynamic topology type checking"""

deviceTypes = {{deviceTypes}}
energyTypes = {{energyTypes}}

def ensureUniquenessInList(lst:list[str]):
    assert len(set(lst)) == len(lst)

class 动态拓扑校验节点:
    def __init__(self, deviceType:str, deviceNameFromFrontend:str, deviceIndex:int, portIndexToPortFrontendName:dict, requiredPortFrontendNameToPortPossibleStates:dict, requiredPortFrontendNameToEnergyTypes:dict, deviceCounter:int = 0):
        requiredPortFrontendNames = list(requiredPortFrontendNameToPortPossibleStates.keys())
        ensureUniquenessInList(requiredPortFrontendNames)
        deviceCounter += 1

        self.deviceName = f"设备{deviceCounter}_{deviceType}"
        self.deviceNameFromFrontend = deviceNameFromFrontend
        self.deviceCounter = deviceCounter
        self.deviceIndex = deviceIndex

        portFrontendNames = list(portIndexToPortFrontendName.values())
        ensureUniquenessInList(portFrontendNames)
        assert set(portFrontendNames) == set(requiredPortFrontendNames)

        self.deviceTypeToDeviceName = {deviceType: self.deviceName}
        self.portFrontendNameToPortName = {portFrontendName: f"{self.deviceName}_{portFrontendName}" for portFrontendName in portFrontendNames}
        self.deviceNameToPortNames = {self.deviceName: list(self.portFrontendNameToPortName.values())}
        self.portIndexToPortName = {portIndex: self.portFrontendNameToPortName[portFrontendName] for portIndex, portFrontendName in portIndexToPortFrontendName.items()}
        self.portNameToPortPossibleStates = {self.portFrontendNameToPortName[requiredPortFrontendName]: portPossibleStates for requiredPortFrontendName, portPossibleStates in requiredPortFrontendNameToPortPossibleStates.items()}

        self.energyTypeToPortNames = {}
        for requiredPortFrontendName, energyTypes in requiredPortFrontendNameToEnergyTypes.items():
            for energyType in energyTypes:
                if energyType not in self.energyTypeToPortNames.keys():
                    self.energyTypeToPortNames[energyType] = []
                self.energyTypeToPortNames[energyType].append(self.portFrontendNameToPortName[requiredPortFrontendName])

{% for deviceType, requiredPortFrontendNameToPortPossibleStates,requiredPortFrontendNameToEnergyTypes in deviceTypeTriplets %}
class {{deviceType}}_动态拓扑校验节点(动态拓扑校验节点):
    def __init__(self,  deviceNameFromFrontend:str, portIndexToPortFrontendName:dict, deviceIndex:int, deviceCounter:int):
        deviceType = {{repr(deviceType)}}
        requiredPortFrontendNameToPortPossibleStates = {{requiredPortFrontendNameToPortPossibleStates}}
        requiredPortFrontendNameToEnergyTypes = {{requiredPortFrontendNameToEnergyTypes}}
        super().__init__(deviceType, deviceNameFromFrontend, deviceIndex, portIndexToPortFrontendName, requiredPortFrontendNameToPortPossibleStates, requiredPortFrontendNameToEnergyTypes, deviceCounter)

{% endfor %}