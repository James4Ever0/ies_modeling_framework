# highlight dsl with: https://github.com/textX/textX-LS
变量: # 定义变量之前，先检查是否被定义了 如果被定义了 那么就不执行定义操作 例如设备台数
    param0
    param10
变量列表:
非负变量列表:
    param1
    param2
    param5<0,100>: [1,10] # varName<lb, ub>: [index_start, index_end, [index_jump]], if variables has been passed to bounds, automatically calculate constant lb/ub for it, then add actual constraints
    param8
指示变量列表: #不能直接使用
    param3 << param8 # assignment symbol (<<): define relaionship between indicators and variables/expressions.
单指示变量:
    param7 << param10
秒级约束:
规划约束:
仿真约束:
约束: # 不同的计算模式需要添加不同的约束 这里定义公共约束
    param6 = param1 + param2 # intermediate expression list. type: list[expr]
    param1 < param0 
    param1 < 10 # constant bounds are recorded and compared.
    param1 + param2 < param0
    param1[i] + param2[i+1] < param0, (optional syntax) i: [0, maxIndex]
    param1[i] + param2[i+1] < param0, i = -1
    diff(param1) = param0 # diff(param1) = param[i] - param[i+1]
    param3 # meaning: param3.x
    (param3) # deprecated.
    mean(param3) # shall complain when passed in some non-list objects. but mean(param3+1) won't complain.
    sum(param3)
    (|+ param3)
    (|- param3)
    (?+ param3) # type: binary variable list.
    (?- param2) # when putting variable list like "param2", create or find indicator variable list along the way, then do the operation.
    (??+ param3) # check if it is "really" positive, equivalent to: (?+ param3 - EPS), EPS = 1e-5. when used with integer variables (list), automatically use this form instead.
    (??- param3)
    |param3|
    param3 * param4 # linearization needed! need param3 and param4 to be bounded.
    param3 < param4 <= param5 # separate this into two expressions. check all symbols are of inequality or equality (=) and with same directions. enforce all symbols in expressions (with variables) are non-strict (>= <=) by automatic conversion.