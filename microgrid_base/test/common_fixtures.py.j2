{# serve as template for our fixtures. #}
{# for better coding experience, refuse to use yaml but embrace python (autocomplete) #}
{# render this to ".py.tmp" first, then modify it. #}

{% macro createTestFixture(className, params = "") %}
@fixture
def 测试{{className}}({{params}}):
    val = {{className}}(
{{caller()}}
    )
    return val
{% endmacro %}

from pytest import fixture
import sys
sys.path.append("../")
{# from ies_optim import * #}

import typing
if typing.TYPE_CHECKING:
    from ..ies_optim_legacy import * # workaround for pyright.
    from ..constants import Solver    
    from ..solve_model import *
else:
    from ies_optim_legacy import *
    from constants import Solver    
    from solve_model import *


import os
os.environ['VAR_INIT_AS_ZERO'] = '1'

@fixture
def model_wrapper():
    mw = ModelWrapper()
    yield mw
    del mw

from typing import Protocol, Any

class Request(Protocol):
    param: Any
    cache: Any

@fixture(scope="session", params=["设计规划", "仿真模拟"], ids=["PLANNING", "SIMULATION"])
def 测试计算参数(request: Request):  # _pytest.fixtures.SubRequest
    import numpy as np
    {# print(type(request)) #}

    arr = abs(np.random.random((24,))).tolist()
    return 计算参数(
        计算目标="经济",
        # 计算目标="经济_环保",
        # 计算目标="环保",
        计算步长="小时",
        {# 计算步长="秒", #}
        典型日=True,
        典型日代表的日期=[1],
        计算类型=request.param,
        风速=arr,
        光照=arr,
        气温=arr,
        年利率=0.1,
    )


{% for _infoClassName, infoData in data.items() %}
    {% set infoClassName = _infoClassName.strip('信息') %}
{{'# {} #'.format(infoClassName.center(70, "="))}}
    {% if infoClassName != "计算参数" %}
        {% set devInfoClassName = infoClassName+"信息"%}
        {% set devModelClassName = infoClassName+"模型"%}
        {% set devIDClassName = infoClassName+"ID"%}

        {% call createTestFixture(devInfoClassName) %}
            {%for infoName, infoValue in infoData.items()%}
        {{infoName}} = {{repr(infoValue)}},
            {%endfor%}
        {% endcall %}

        {% call createTestFixture(devIDClassName) %}
            {% for k,v in id_data[_infoClassName].items() %}
        {{k}} = {{v}},
            {% endfor %}
        {% endcall %}

        {% call createTestFixture(devModelClassName, "测试{className}信息: {className}信息, model_wrapper: ModelWrapper, 测试计算参数: 计算参数, 测试{className}ID: {className}ID".format(className = infoClassName))%}
        PD={}, mw=model_wrapper, 计算参数实例=测试计算参数, 设备ID=测试{{devIDClassName}}, 设备信息=测试{{devInfoClassName}}
        {% endcall %}
    {% else%}
        {% call createTestFixture("设备模型", "model_wrapper: ModelWrapper, 测试计算参数: 计算参数") %}
        PD={}, mw=model_wrapper, 计算参数实例=测试计算参数, ID=0
        {% endcall %}
    {% endif %}

{% endfor %}
