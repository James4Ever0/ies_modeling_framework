from common_fixtures import *

from typing import cast

try:
    from typing import Protocol
except:
    from typing_extensions import Protocol
from pyomo.environ import *
# may you hook arith methods to check expression (poly degree) on the way.

# render constraints as latex. use sigma notation.
{# to define some "adaptive" decorators (like `pytest.fixture`) you may want `functools.partial` and recursion. #}
EPS = 0.02
SMALL_EPS = EPS*0.075

def check_solver_result(s_results):
    assert s_results, "no solver result."
    TC = s_results.solver.termination_condition
    SS = s_results.solver.status
    normalSSs = [SolverStatus.ok, SolverStatus.warning]
    normalTCs = [
        TerminationCondition.globallyOptimal,
        TerminationCondition.locallyOptimal,
        TerminationCondition.feasible,
        TerminationCondition.optimal,
        # TerminationCondition.maxTimeLimit,
    ]
    error_msg = []
    if TC not in normalTCs:
        error_msg.append(f"abnormal termination condition: {TC}")
    if SS not in normalSSs:
        error_msg.append(f"abnormal solver status: {TC}")
    if error_msg:
        raise Exception("\n".join(error_msg))

def test_convertMonthToDays():
    assert convertMonthToDays(1) == sum(month_days[:1])
    assert convertMonthToDays(2) == sum(month_days[:2])
    assert convertMonthToDays(11) == sum(month_days[:11])

{# def test_unitFactorCalculator():
    ... #}

import pytest

{# store shared objects. mainly "testDeviceFixture"#}
{% set SO = namespace(TDF = "") %}
{% set CTDF = "测试设备模型" %}
{% set paramStringList = [] %}
{% macro parametrize(mParamString) %}
    {% do paramStringList.append(mParamString) %}
@pytest.mark.parametrize({{repr(mParamString)}},{{caller()}})
{% endmacro%}
{% macro parametrizeTestHelper(testName,_params, autoRegister=true, autoSense=true) %}
{# shall you ensure no parameter is undefined.#}
    {% set isDevice = false%}
    {% if _params == "Device"%}
        {% set isDevice = true%}
        {% set _params = "model_wrapper: ModelWrapper, 测试{testName}模型: {testName}模型".format(testName=testName) %}
        {% set SO.TDF = "测试{}模型".format(testName)%}
    {% endif%}
    {% if _params != ""%}
        {% do paramStringList.append(_params)%}
    {% endif%}
{{caller()}}
{% if autoSense%}
    {%call parametrize("sense")%}[minimize, maximize]{%endcall%}
{% endif%}
def test_{{testName}}({{",".join(paramStringList)}}):
    {# {{'#'}} {{_params}} {{autoRegister}} #}
    {% if isDevice %}
        {% if autoRegister == true %}
    测试{{testName}}模型.constraints_register()
        {% endif%}
    {% endif%}
{# def test_{{testName}}({{join(",",paramStringList)}}): #}
    {% do paramStringList.clear() %}
    {# do not use "set" #}
{% endmacro%}
{% macro solveModel(objective, sense='sense')%}
    {# model_wrapper.Objective(expr={{objective}}, sense={{sense if sense == 'sense' else repr(sense)}}) #}
    model_wrapper.Objective(expr={{objective}}, sense={{sense}})
    with SolverFactory(Solver.cplex) as solver: # type: ignore
        TransformationFactory("gdp.bigm").apply_to(model_wrapper.model, bigM=1e8)
        print(">>>SOLVING<<<")
        solver.options["timelimit"] = 5 
        s_results = solver.solve(model_wrapper.model, tee=True)
        print("SOLVER RESULTS?")
        print(s_results)
        check_solver_result(s_results)

{% endmacro %}

# BUG: BigM <= 1e+8
{# {% call parametrizeTestHelper("BinVarMultiplySingle")%} #}
{% set commonDevTestParam ="model_wrapper: ModelWrapper, {ctdf}: 设备模型".format(ctdf=CTDF) %}
{% call parametrizeTestHelper("BinVarMultiplySingle", commonDevTestParam, autoSense=false)%}
    {% call parametrize("v0_is_constant")%}[False, True]{% endcall%}
    {% call parametrize("v0_within, min_v0, max_v0, sense, result")%}
    [
        (Reals, -1, 10, minimize, -1),
        (Reals, -1, 10, maximize, 10),
        (NonNegativeReals, 1, 10, minimize, 0),
        (NonNegativeReals, 1, 10, maximize, 10),
    ]
    {%endcall%}
    {% call parametrize("v1_init")%}[0, 1]{%endcall%}
    {% call parametrize("v0_init")%}[3]{%endcall%}
    {% call parametrize("v1_within")%}[Boolean, pytest.param(NonNegativeReals, marks=pytest.mark.xfail)]{% endcall%}
{% endcall %}
    assert min_v0 <= max_v0
    if v0_is_constant:
        v0 = v0_init
    else:
        v0 = {{CTDF}}.单变量(
            "v0", within=v0_within, initialize=v0_init, bounds=(min_v0, max_v0)
        )
    v1 = {{CTDF}}.单变量("v1", within=v1_within, initialize=v1_init)
    v_result = {{CTDF}}.BinVarMultiplySingle(v1, v0)
{{solveModel('v_result')}}
        print(f"v0: {value(v0)}")
        print(f"v1: {value(v1)}")
        print(f"PROD: {value(v_result)}")
        print(f"EXPECTED: {result}")
        print(f"ACTUAL: {value(v0)*value(v1)}")
        if v0_is_constant:
            if sense == minimize:
                result = min(0, v0_init)
            elif sense == maximize:
                result = max(0, v0_init)
            else:
                assert False, f"Wrong sense: {sense}"
        assert abs(value(v_result) - result) <= EPS

{% call parametrizeTestHelper("VarMultiplySingle", commonDevTestParam, autoSense=false)%}
    {% call parametrize("v0_min, v0_max, v1_min, v1_max, sense, expected, param")%}
    [
        (1, 5, 2, 4, minimize, 2, 0),
        (1, 5, 2, 4, maximize, 20, 0),
        (-1, 3, -2, 4, minimize, -10, -2),
        (-1, 3, -2, 4, maximize, 8, -2),
    ]
    {% endcall %}
{% endcall %}
    v0 = {{CTDF}}.变量列表("v0", bounds=(v0_min, v0_max))
    v0_dict = dict(var=v0, max=v0_max, min=v0_min)

    v1 = {{CTDF}}.变量列表("v1", bounds=(v1_min, v1_max))
    v1_dict = dict(var=v1, max=v1_max, min=v1_min)

    v0_v1 = {{CTDF}}.Multiply(v0_dict, v1_dict, "v0_v1")
    obj_expr = v0_v1[0] + param * (v0[0] + v1[0])
{{solveModel('obj_expr')}}
        assert abs(value(obj_expr) - expected) <= EPS

{% call parametrizeTestHelper("单表达式生成指示变量", commonDevTestParam, autoSense=false) %}
    {% call parametrize("v0_min, v0_max, sense, expected_v0, expected_v1_b_pos, expected_v1_x_pos, expected_v1_b_neg, expected_v1_x_neg, expected_v1_x_abs")%}
    [
        (-1, 5, maximize, 5, 1, 5, 0, 0, 5),
        (-1, 5, minimize, -1, 0, 0, 1, 1, 1),
        (-2, 5, minimize, -2, 0, 0, 1, 2, 2),
    ]
    {% endcall%}
{% endcall%}
    v0 = {{CTDF}}.单变量("v0", bounds=(v0_min, v0_max))
    v1 = {{CTDF}}.单表达式生成指示变量("v1", v0)
    # v1 = 测试设备模型.单表达式生成指示变量("v1", v0+0)
{{solveModel('v0')}}
        assert abs(expected_v0 - value(v0)) <= EPS
        assert abs(expected_v1_b_pos - value(v1.b_pos)) <= EPS
        assert abs(expected_v1_x_neg - value(v1.x_neg)) <= EPS
        assert abs(expected_v1_b_neg - value(v1.b_neg)) <= EPS
        assert abs(expected_v1_x_pos - value(v1.x_pos)) <= EPS
        assert abs(expected_v1_x_abs - value(v1.x_abs)) <= EPS


import numpy as np

{% call parametrizeTestHelper("Piecewise", commonDevTestParam, autoSense=false) %}
    {%call parametrize("x_init, y_expected, sense")%}
    [
        (0, 2, minimize),
        (0, 2, maximize),
        (0.3, 2.3, minimize),
        (0.3, 2.3, maximize),
        (0 - 1, 2, minimize),  # BUG: y = 0 if x is out of bound
        (0 - 1, 2, maximize),
        (0 + 3, 4, minimize),
        (0 + 3, 4, maximize),
    ]
    {% endcall %}
{% endcall %}
    x = [{{CTDF}}.单变量("x", initialize=x_init, bounds=(x_init, x_init))]
    y = [{{CTDF}}.单变量("y")]
    x_vals = np.linspace(0, 2, 2)
    y_vals = x_vals + 2
    {{CTDF}}.Piecewise(x, y, x_vals.tolist(), y_vals.tolist(), range_list=[0])
    obj_expr = y[0]
{{solveModel("obj_expr")}}
        assert abs(value(obj_expr) - y_expected) <= EPS

# if use timeout as solver option, usually not so good.
# you will not get accurate results.


{% call parametrizeTestHelper("柴油", "Device")%}
    {% call parametrize("diesel_rate, fee_rate_per_hour")%}[(1, 2), (3, 6)]{%endcall%}
{%endcall%}
    {# 测试柴油模型.constraints_register() #}
    {{SO.TDF}}.RangeConstraintMulti(
        {{SO.TDF}}.燃料接口, expression=lambda x: x == diesel_rate
    )  # unit: m^3
    {# obj_expr = 测试柴油模型.总成本年化 #}
    obj_expr = {{SO.TDF}}.燃料接口[0]
{{ solveModel("obj_expr")}}
        val_fee = value({{SO.TDF}}.总成本年化 / 1000) / 8760
        assert abs(val_fee - fee_rate_per_hour) < EPS

# 20 is rated power, 10 is halfway.
{% call parametrizeTestHelper("柴油发电", "Device", autoRegister=false, autoSense=false) %}
@pytest.mark.timeout(30)  # pip3 install pytest-timeout
    {% call parametrize("power_output, expected_val, expected_diesel, adcr_expected, expected_diesel_optim") %}
    [
        (10, 10, -(3*2+1*3)/5 * 0.001 * 10, (3*2+1*3)/5*0.001, -3*0.001*10),
        (20, 20, -(3*2+1*3)/5 * 0.001 * 20, (3*2+1*3)/5*0.001, -1*0.001*20),
    ]
    {% endcall %}
{% endcall %}
    optim = {{SO.TDF}}.设备信息.unitPlanningAlgorithmSelection == '最佳'
    if optim:
        expected_diesel = expected_diesel_optim
    {{SO.TDF}}.燃料热值 = 1
    {{SO.TDF}}.constraints_register()
    {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输出, expression=lambda x: x == power_output)
    if not optim:
        assert ({{SO.TDF}}.averageDieselConsumptionRate - adcr_expected) < EPS
    assert {{SO.TDF}}.averageLoadRate == 0.8
    obj_expr = {{SO.TDF}}.总成本年化
    print("年化:", obj_expr)
{{solveModel("obj_expr", sense='minimize')}}
        {# if optim: breakpoint() #}
        print("ELECTRICITY:", value({{SO.TDF}}.电输出[0]), expected_val)
        {# print("ELECTRICITY:", value({{SO.TDF}}.原电输出[0]), expected_val) #}
        print("DIESEL:", value({{SO.TDF}}.柴油输入[0]), expected_diesel)
        assert abs(value({{SO.TDF}}.电输出[0]) - expected_val) <= EPS
        {# assert abs(value({{SO.TDF}}.原电输出[0]) - expected_val) <= EPS #}
        {# assert abs(value({{SO.TDF}}.柴油输入[0]) - expected_diesel) <= EPS #}
        assert abs(value({{SO.TDF}}.柴油输入[0]) - expected_diesel) <= SMALL_EPS
        # breakpoint()


{% call parametrizeTestHelper("燃气发电机", "Device", autoRegister=false, autoSense=false) %}
@pytest.mark.timeout(30)  # pip3 install pytest-timeout
    {% call parametrize("power_output, expected_val, expected_gas, agcr_expected, expected_gas_optim") %}
    [
        (10, 10, -32.85714, 3.285714, -((2*3+3*1)/3)*10),
        (20, 20, -65.71428, 3.285714, -((2*1+3*2)/3)*20),
    ]
    {% endcall %}
{% endcall %}
    optim = {{SO.TDF}}.设备信息.unitPlanningAlgorithmSelection == '最佳'
    if optim:
        expected_gas = expected_gas_optim
    expected_hot_water = expected_val * {{SO.TDF}}.设备信息.HotWaterToElectricityRate
    expected_hot_gas = expected_val * {{SO.TDF}}.设备信息.HotGasToElectricityRate
    {{SO.TDF}}.燃料热值 = 1
    {{SO.TDF}}.constraints_register()
    {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输出, expression=lambda x: x == power_output)
    if not optim:
        assert ({{SO.TDF}}.averageGasConsumptionRate - agcr_expected) < EPS
    assert {{SO.TDF}}.averageLoadRate == 0.5
    obj_expr = {{SO.TDF}}.总成本年化
    print("年化:", obj_expr)
{{solveModel("obj_expr", sense='minimize')}}
        {# if optim: breakpoint() #}
        print("TABLE DS:", {{SO.TDF}}.DieselToPower_Load)
        print("TABLE NG:", {{SO.TDF}}.NaturalGasToPower_Load)
        print("ELECTRICITY:", value({{SO.TDF}}.电输出[0]), expected_val)
        print("GAS:", value({{SO.TDF}}.天然气输入[0]), expected_gas)
        print("HOT WATER:", value({{SO.TDF}}.缸套水余热接口[0]), expected_hot_water)
        print("HOT GAS:", value({{SO.TDF}}.高温烟气余热接口[0]), expected_hot_gas)
        assert abs(value({{SO.TDF}}.电输出[0]) - expected_val) <= EPS
        try:
            assert abs(value({{SO.TDF}}.天然气输入[0]) - expected_gas) <= EPS
            assert abs(value({{SO.TDF}}.缸套水余热接口[0]) - expected_hot_water) <= EPS
            assert abs(value({{SO.TDF}}.高温烟气余热接口[0]) - expected_hot_gas) <= EPS
        except:
            breakpoint()

def test_电价模型():
    {# from ies_optim import 电负荷信息, 分月电价 #}

    mydata = dict(PriceList=[1] * 12)
    myInfo = 电负荷信息.parse_obj(
        dict(
            设备名称="Any",
            EnergyConsumption=[1, 2, 3],
            MaxEnergyConsumption=4,
            PriceModel=mydata,
        )
    )
    myPriceModel = 分月电价.parse_obj(mydata)
    print(myInfo)
    # breakpoint()
    assert myPriceModel == myInfo.PriceModel

{% call parametrizeTestHelper("DayToMonth","", autoSense=false)%}
    {% call parametrize("day_index, expected_month")%}
    [
        (1, 0),
        pytest.param(365, 11, marks=pytest.mark.xfail),
        (364, 11),
        (363, 11),
        (333, 10),
    ]
    {%endcall%}
{%endcall%}
    {# from ies_optim import convertDaysToMonth #}
    month_index = convertDaysToMonth(day_index)
    assert month_index == expected_month

{% call parametrizeTestHelper("分月电价","", autoSense=false)%}
    {% call parametrize("hour_index, expected_price, power")%}
    [
        (2, 4 * 0.0001 * 1, 4),
        (24 * 40, 4 * 0.0001 * 2, 4),
        (24 * 30 * 2 + 10, 4 * 0.0001 * 3, 4),
        pytest.param(8760, 4 * 0.0001 * 12, 4, marks=pytest.mark.xfail),
        (8779, 4 * 0.0001 * 12, 4),
    ]
    {%endcall%}
{%endcall%}
    myPriceModel = 分月电价(PriceList=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    mprice = myPriceModel.getFee(power, time_in_day=hour_index)
    assert abs(mprice - expected_price) == 0
{# import math #}

{% call parametrizeTestHelper("光伏发电", "Device", autoSense=false, autoRegister=false)%}
    {% call parametrize("illumination, output")%}[(1, 9.8), (0.5, 4.9),(2,9.8)]{% endcall %}
{% endcall %}
    illumination_array = [illumination]*24

    {{SO.TDF}}.计算参数.光照 = illumination_array
    {{SO.TDF}}.constraints_register()
{{ solveModel("{tdf}.电接口[0]+{tdf}.电接口[2]".format(tdf=SO.TDF), sense='maximize') }}
        devCount = value({{SO.TDF}}.DeviceCount)
        {# devCount = {{SO.TDF}}.MaxDeviceCount #}
        assert abs(value({{SO.TDF}}.电接口[0]) - output*devCount)< EPS
        assert abs(value({{SO.TDF}}.电接口[2]) - output*devCount)< EPS
    
{% call parametrizeTestHelper("风力发电", "Device", autoSense=false, autoRegister=false)%}
    {% call parametrize("windspeed, output")%}[(5,0),(10,0),(20,100*((10/90)**3)),(50,100*(((50-10)/90)**3)), (100,100), (150,100), (200,100), (210, 0)]{% endcall%}
{% endcall%}
    
    windspeed_array = [windspeed]*24
    # override the windspeed.
    {{SO.TDF}}.计算参数.风速 = windspeed_array
    {{SO.TDF}}.constraints_register()
{# {{ solveModel("测试风力发电模型.总成本年化", sense='minimize') }} #}
{{ solveModel("{tdf}.电接口[0]+{tdf}.电接口[2]".format(tdf=SO.TDF), sense='maximize') }}
        devCount = {{SO.TDF}}.设备信息.DeviceCount
        assert abs(value({{SO.TDF}}.DeviceCount) - devCount)< EPS
        if {{SO.TDF}}.设备信息.machineType == '标幺值':
            output = {{SO.TDF}}.设备信息.RatedPower*0.5
        assert abs(value({{SO.TDF}}.单台发电功率[0]) - output)< EPS
        assert abs(value({{SO.TDF}}.单台发电功率[2]) - output)< EPS
        assert abs(value({{SO.TDF}}.电接口[0]) - output*devCount)< EPS
        assert abs(value({{SO.TDF}}.电接口[2]) - output*devCount)< EPS
 
{# likely to be inversed efficiency. #}
{% call parametrizeTestHelper("双向变流器", "Device")%}
    {% call parametrize("_input, output")%}[(100, 98), (200,196)]{% endcall%}
    {% call parametrize("direction")%}[False,True]{% endcall%}
{% endcall%}
    if direction:
        {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.储能端, expression = lambda x: x == -_input)
    else:
        {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.线路端, expression = lambda x: x == -_input)
{{ solveModel("{tdf}.总成本年化".format(tdf=SO.TDF)) }}
        if direction:
            assert abs(value({{SO.TDF}}.线路端[0]) - output) < EPS
            assert abs(value({{SO.TDF}}.线路端[2]) - output) < EPS
        else:
            assert abs(value({{SO.TDF}}.储能端[0]) - output) < EPS
            assert abs(value({{SO.TDF}}.储能端[2]) - output) < EPS

{% call parametrizeTestHelper("变压器", "Device")%}
    {% call parametrize("_input, output")%}[(10, 8.1), (5,8.1/2)]{% endcall%}
{% endcall%}
    unidirected = {{SO.TDF}}.设备信息.direction == 'Directed'
    if unidirected:
        {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输入, expression = lambda x: x == -_input)
    else:
        {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输入, expression = lambda x: x == output)
{{ solveModel("{tdf}.总成本年化".format(tdf=SO.TDF)) }}
        if unidirected:
            assert abs(value({{SO.TDF}}.电输出[2]) - output) < EPS
        else:
            assert abs(value({{SO.TDF}}.电输入[2]) - output) < EPS

{% call parametrizeTestHelper("变流器", "Device")%}
    {% call parametrize("_input, output")%}[(10, 9), (5,9/2)]{% endcall%}
{% endcall%}
    {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输入, expression = lambda x: x == -_input)
{{ solveModel("{tdf}.总成本年化".format(tdf=SO.TDF)) }}
        assert abs(value({{SO.TDF}}.电输出[2]) - output) < EPS


{% call parametrizeTestHelper("传输线", "Device")%}
    {% call parametrize("_input, output") %}[(100, 100-1.377), (200, 200-1.377), (1, 0), (1.377, 0), (1.378, 0.001)]{% endcall %}
    {# {% call parametrize("_input, output")%}[(100, 90), (200,190)]{% endcall%} #}
    {# {% call parametrize("input_only") %}[False,True]{% endcall %} #}
{% endcall %}
    {# if input_only: #}
    {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输入, expression=lambda x: x == -_input)
    {# else:
        {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电输出, expression=lambda x: x == output) #}
    {# decay = 1*10 #}
{{ solveModel("{tdf}.SumRange({tdf}.电输出)".format(tdf=SO.TDF)) }}
{# {{ solveModel("测试传输线模型.总成本年化")}} #}
        assert abs(value({{SO.TDF}}.电输出[0]) - output) < EPS
        assert abs(value({{SO.TDF}}.电输出[2]) - output) < EPS

        assert abs(-value({{SO.TDF}}.电输入[0]) - _input) < EPS
        assert abs(-value({{SO.TDF}}.电输入[2]) - _input) < EPS

{# infeasible! just why? #}
{# if making no "more" constraints we will solve it. #}
{# you need to parametrize your test. to prevent further issues, use signature based "yield" insertion strategy. #}
{# try to import our stepwise test util. #}
from runtime_override_stepwise import iterate_till_keyword, overwrite_func
{% call parametrizeTestHelper("锂电池", "Device", autoRegister=false) %}
{# {% call parametrizeTestHelper("锂电池", "Device")%} #}
    {% call parametrize("device_count, total_decay_rate") %}[(500/20, 500*0.1 )]{% endcall%}
    {# {% call parametrize("ie, eport_constraint_dynamic")%}enumerate([lambda x: x<=0, lambda x: x == 0, lambda x: x == -40, lambda x: x >= -40]){%endcall%} #}
    {# with enumerate -> list: 170 items #}
    {# without: 170 items #}
    {# {% call parametrize("eport_constraint_static")%}[lambda x: x<=0, lambda x: x == -50, lambda x: x <= -40]{%endcall%} #}
    {# {% call parametrize("eport_constraint_static")%}[lambda x: x<=0, lambda x: x == -50, lambda x: x <= -40]{%endcall%} #}
{% endcall%}
    {# 测试锂电池模型.RangeConstraintMulti(测试锂电池模型.电接口, expression = lambda x: x == 500 * (10/100) / (50/100)) #}
    {# 测试锂电池模型.RangeConstraintMulti(测试锂电池模型.电接口, expression = lambda x: x == 1) # BUG: cannot discharge #}
    {# is_dynamic = {{SO.TDF}}.needStorageDecayCompensation #}
    {# #}
    {{SO.TDF}}.constraints_register()
    {# if is_dynamic: #}
    {# {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电接口, expression = eport_constraint_dynamic) # means charging the battery. #}
    {# else: #}
        {# if ie != 0: return # skip other lambda expressions. #}
    {# {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电接口, expression = eport_constraint_dynamic if is_dynamic else eport_constraint_static) #}
    def verify_constraints(i):
{# 
        if is_dynamic:
            compensated_decay_rate = value({{SO.TDF}}.CurrentTotalPowerOfDecayCompensated[i])
        else:
            compensated_decay_rate = 0 #}

        delta_capacity = value({{SO.TDF}}.CurrentTotalCapacity[i] *(1-{{SO.TDF}}.sigma*{{SO.TDF}}.计算参数.deltaT)- {{SO.TDF}}.CurrentTotalCapacity[i+1])
        assert abs(delta_capacity - value({{SO.TDF}}.原电接口.x[i]*{{SO.TDF}}.计算参数.deltaT)) < EPS
        {# 原电接口_xi = value({{SO.TDF}}.原电接口.x[i])
        电接口_i = value({{SO.TDF}}.电接口[i])
        _total_decay_rate = value({{SO.TDF}}.TotalStoragePowerOfDecay)
        if 原电接口_xi>=0:
            assert abs( 原电接口_xi * {{SO.TDF}}.DischargeEfficiency - (_total_decay_rate - compensated_decay_rate) / {{SO.TDF}}.ChargeEfficiency - 电接口_i )< EPS
        else:
            assert abs((原电接口_xi - (_total_decay_rate - compensated_decay_rate)) / {{SO.TDF}}.ChargeEfficiency - 电接口_i) < EPS #}

{{ solveModel("{tdf}.总成本年化".format(tdf=SO.TDF))}}
        assert abs(value({{SO.TDF}}.DeviceCount)) == device_count
        {# assert abs(value({{SO.TDF}}.TotalStoragePowerOfDecay) - total_decay_rate) < EPS #}

        init_capacity = value({{SO.TDF}}.DeviceCount) * {{SO.TDF}}.InitSOC * {{SO.TDF}}.RatedCapacity

        assert abs(value({{SO.TDF}}.CurrentTotalCapacity[0]) - init_capacity) < EPS
        for i in range(5):
            verify_constraints(i)

        if last_capacity:= value({{SO.TDF}}.CurrentTotalCapacity[len({{SO.TDF}}.计算参数.风速)-1]) < 0:
            assert abs(last_capacity) <= EPS
{# 
        print(value({{SO.TDF}}.CurrentTotalPowerOfDecayCompensated[0]))
        print(value({{SO.TDF}}.CurrentTotalPowerOfDecayCompensated[1]))
        print(value({{SO.TDF}}.CurrentTotalPowerOfDecayCompensated[2]))
        breakpoint()
        print()
        print(value({{SO.TDF}}.电接口[0]))
        print(value({{SO.TDF}}.电接口[1]))
        print(value({{SO.TDF}}.电接口[2]))
        print()
        print(value({{SO.TDF}}.原电接口.x[0]))
        print(value({{SO.TDF}}.原电接口.x[1]))
        print(value({{SO.TDF}}.原电接口.x[2]))
        print()
        print(value({{SO.TDF}}.CurrentTotalCapacity[0]))
        print(value({{SO.TDF}}.CurrentTotalCapacity[1])) # this is not the "real" total capacity. add "total min capacity" first.
        print(value({{SO.TDF}}.CurrentTotalCapacity[2]))
        # all zero?
        # 0.0
        breakpoint() 
#}
        {# assert abs(value(测试锂电池模型.CurrentTotalCapacity[0]+ 500 * (测试锂电池模型.设备信息.MinSOC/100)) - 500 * (测试锂电池模型.设备信息.InitSOC/100)) < EPS #}

{% call parametrizeTestHelper("电解槽", "Device")%}
    {% call parametrize("_input, h2_output, heat_output")%}
    [
        (3000,(3000*0.6)/33300,3000*0.4*0.7),
        (2000,(2000*0.6)/33300,2000*0.4*0.7)
    ]
    {% endcall%}
{% endcall%}
    {{SO.TDF}}.RangeConstraintMulti({{SO.TDF}}.电接口, expression=lambda x: x == -_input)

{{ solveModel("{tdf}.总成本年化".format(tdf=SO.TDF))}}
        for i in range(3):
            assert abs(-value({{SO.TDF}}.电接口[i]) -_input)< EPS
            assert abs(value({{SO.TDF}}.制氢接口[i]) -h2_output)< EPS
            assert abs(value({{SO.TDF}}.设备余热接口[i]) -heat_output)< EPS