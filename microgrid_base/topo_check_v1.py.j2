from log_utils import logger_print

{# from pydantic import BaseModel #}
{# import when needed. #}
import networkx
from networkx.readwrite import json_graph
from config import ies_env
# when to check topology:
# 	1.  Building topology <- which the frontend does the job
# 	2.  Importing topology <- where algorithm kicks in

# so here we only check topo when importing. we don't check validity during topo construction.

{# type_sys = {{str(type_sys)}} # will work? #}

# 母线最多99个对接的接口

def getMainAndSubType(data):
    logger_print("DATA:", data)
    return data['type'], data['subtype']

# better use some template.
# 设备、母线、连接线、合并线
{% for mtype, mdata in 类型集合分类 %}
{{mtype}}类型 = {{mdata}}

{% endfor %}

设备接口集合 = {{ 设备接口集合 }}
连接类型映射表 = {{连接类型映射表}}
{# 
def getMainAndSubType(data):
    mainType = data['type']
    subType = data['subtype']
    return mainType, subType #}

{% macro neighborIterator() %}

                for n in neighbors:
                    ne_data = self.G.nodes[n]
                    ne_type, ne_subtype = getMainAndSubType(ne_data)

{% endmacro %}

{% macro adderMacro(source_subtype, source_id, target)%}

                    if {{source_subtype}}.endswith("输入输出"):
                        {{target}}['IO'].append({{source_id}})
                    elif {{source_subtype}}.endswith("输入"):
                        {{target}}['output'].append({{source_id}})
                    elif {{source_subtype}}.endswith("输出"):
                        {{target}}['input'].append({{source_id}})
                    else:
                        raise Exception("Unknown type:", {{source_subtype}})

{% endmacro %}
{% macro error_node_info(node_id="node_id")%}节点 {{"#{"}}{{node_id}}{{"}"}}{% endmacro %}
class 拓扑图:
    def __init__(self, **kwargs):
        self.node_count = 0
        self.G = networkx.Graph(**kwargs)
        self.合并母线ID集合列表 = []
        self.is_valid = ies_env.FAILSAFE

    def get_all_devices(self) -> list:
        devs = []
        for node_index, node_data in self.G.nodes.items():
            node_type = node_data['type']
            node_data['id'] = node_index
            
            if node_type == "设备":
                devs.append(node_data)
        return devs

    def get_all_adders(self) -> dict: # don't care about types here.
        # use adder ids. adder starts with -1
        adders = {min(s):{"input":[], "output":[], "IO":[]} for s in self.合并母线ID集合列表} # 用到：合并母线ID集合列表
        adder_id = -1
        母线ID映射表 = {e:min(s) for s in self.合并母线ID集合列表 for e in s}
        # format: {"input":input_ids, "output": output_ids, "IO": IO_ids}
        for node_index, node_data in self.G.nodes.items():
            node_type = node_data["type"]
            if node_type == "连接线":
                adder = {"input":[], "output":[], "IO":[]}
                #  检查连接线两端
                left_id, right_id = self.G.neighbors(node_index)

                left_type = self.G.nodes[left_id]['type']
                right_type = self.G.nodes[right_id]['type']

                left_subtype = self.G.nodes[left_id]['subtype']
                right_subtype = self.G.nodes[right_id]['subtype']


                if left_type == "母线" and right_type == "锚点":
                    (left_id, left_type, left_subtype), (right_id, right_type,right_subtype) = (right_id, right_type,right_subtype), (left_id, left_type, left_subtype)

                if left_type == "锚点" and right_type == "锚点":
{{ adderMacro("left_subtype", "left_id", "adder") }}
{{ adderMacro("right_subtype", "right_id", "adder") }}
                    adders[adder_id] = adder
                    adder_id -= 1
     
                elif left_type == "锚点" and right_type == "母线":
                    madder_id = 母线ID映射表[right_id]
{{ adderMacro("left_subtype", "left_id", "adders[madder_id]") }}
                else:
                    raise Exception(f"不合理的连接线两端：{left_type}[{left_subtype}]-{right_type}[{right_subtype}]")

                {# adders.append(adder) #}
        return adders

    def get_graph_data(self) -> dict: # primary data. shall be found somewhere.
        graph_data = self.G.graph
        return graph_data

    def add_node(self, **kwargs):
        self.G.add_node(self.node_count,**kwargs)
        node_id = self.node_count
        self.node_count += 1
        return node_id
    # monotonically adding a node.
    def check_consistency(self): # return nothing.
        #  use subgraph
        # 提取所有母线ID
        母线ID列表 = []
        合并线ID列表 = []
        for node_id, node_data in self.G.nodes.items():
            node_type, node_subtype = getMainAndSubType(node_data)
            logger_print("NODE TYPE:", node_type)
            logger_print("NODE SUBTYPE:", node_subtype)
            neighbors = list(self.G.neighbors(node_id))
            logger_print("NEIGHBORS:", neighbors)
            for n in neighbors:
                logger_print(self.G.nodes[n])
            logger_print("="*40)
            if node_type == "母线":
                母线ID列表.append(node_id)
                assert node_subtype in 母线类型, f"{{error_node_info()}} 不存在的母线类型: {node_subtype}"
                assert len(neighbors) <= 99, f"{{error_node_info()}} 母线连接数超过99: {len(neighbors)}"
{{ neighborIterator()}}
                    if ne_type == "合并线":
                        # just check type.
                        assert ne_subtype in 合并线类型, f"{{error_node_info('n')}} 不存在的合并线类型: {ne_subtype}"
                        assert ne_subtype.replace("合并", "连接") == node_subtype, f"{{error_node_info('n')}}"
                    elif ne_type == "连接线":
                        assert ne_subtype in 连接线类型, f"{{error_node_info('n')}} 不存在的连接线类型: {ne_subtype}"

                        assert ne_subtype.replace('不可','可').replace("输入","").replace("输出","") == node_subtype, f"{{error_node_info('n')}} 不合理的连接对： ({ne_subtype}, {node_subtype})"
                    else:
                        raise Exception(f"{{error_node_info('n')}} {node_subtype}连接非法类型节点：",ne_type)
            elif node_type == "设备":
                assert node_subtype in 设备类型, f"{{error_node_info()}} 不存在的设备类型: {node_subtype}"
                port_set = set()
{{neighborIterator()}}
                    port_name = ne_data['port_name']
                    assert ne_type == "锚点", f"{{error_node_info('n')}} 错误的节点类型: {ne_type}"
                    assert len(list(self.G.neighbors(n))) == 2, f"{{error_node_info('n')}} 相邻节点数错误: {len(list(self.G.neighbors(n)))} 相邻节点: {(list(self.G.neighbors(n)))}"
                    port_set.add((port_name, ne_subtype))

                assert port_set == 设备接口集合[node_subtype], f"{{error_node_info()}}  PORT SET: {port_set} TARGET: {设备接口集合[node_subtype]}"
            elif node_type == "连接线":
                assert node_subtype in 连接线类型, f'{{error_node_info()}} 不合理连接线类型： {node_subtype}'
                assert len(neighbors) == 2, f'{{error_node_info()}} 不合理连接线相邻节点数: {len(neighbors)} 相邻节点: {neighbors}'
                dev_ids = set()
                subtypes = []
                {{neighborIterator()}}
                    assert ne_type in ["锚点","母线"]
                    subtypes.append(ne_subtype)
                    if ne_type == "锚点":
                        dev_ids.add(ne_data['device_id'])
                    else:
                        dev_ids.add(n)
                assert len(dev_ids) == 2, f'{{error_node_info()}} invalid dev_ids: {dev_ids}' # no self-connection.
                try:
                    assert 连接类型映射表[frozenset(subtypes)] == node_subtype
                except:
                    raise Exception(f"{{error_node_info()}} 未知连接组合: (两端: {subtypes} 连接线: {node_subtype})")
            elif node_type == "合并线":
                合并线ID列表.append(node_id)
                assert node_subtype in 合并线类型, f"{{error_node_info()}} 未知合并线类型: {node_subtype}"
                assert len(neighbors) == 2, f"{{error_node_info()}} 不合理相邻节点数: {len(neighbors)} 相邻节点: {len(neighbors)}"
                node_ids = set()
                {{neighborIterator()}}
                    assert ne_type == "母线", f"{{error_node_info('n')}} 不合理类型: {ne_type}"
                    node_ids.add(n)
                assert len(node_ids) == 2, f"{{error_node_info()}} 不合理合并线总节点数：{len(node_ids)} 节点列表: {node_ids}"
            elif node_type == '锚点':
                continue
            else:
                raise Exception("unknown node type:", node_type)
        subgraph = self.G.subgraph(母线ID列表+合并线ID列表) # check again.
        logger_print("母线ID列表:", 母线ID列表)
        {# breakpoint() #}
        self.合并母线ID集合列表 = list(networkx.connected_components(subgraph))
        self.合并母线ID集合列表 = [set([i for i in e if i not in 合并线ID列表]) for e in self.合并母线ID集合列表]
        logger_print("合并母线ID集合列表:", self.合并母线ID集合列表)
        for id_set in self.合并母线ID集合列表:
            has_input = False
            has_output = False
            input_conns = []
            output_conns = []
            for node_id in id_set:
                node_data = self.G.nodes[node_id]
                {# if node_data['type'] == '合并线': continue #}
                conn = [e for e in node_data['conn'] if not e.startswith("可合并")] # list.
                merge = [e for e in node_data['conn'] if e.startswith("可合并")]
                assert len(merge)<=2, f'{{error_node_info()}} 错误的可合并连接数: {len(merge)} 可合并线列表: {merge}'
                for c in conn:
                    if not c.endswith("输入输出"):
                        if c.endswith("输入"):
                            input_conns.append(c)
                            has_input=True
                        elif c.endswith("输出"):
                            output_conns.append(c)
                            has_output=True
                        else:
                            raise Exception(f"{self.G.nodes[node_id]['type']}不可接受的连接类型: {c}")
            if has_input and has_output:
                # 检查柴油类型的
                if output_conns[0] == "不可连接柴油母线输出":
                    assert len(output_conns) == 1, f"{{error_node_info()}} 柴油母线有且只有一个与柴油元件的连接"
            else:
                logger_print()
                logger_print("============ERROR LOG============")
                logger_print()
                for n in id_set:
                    logger_print("母线:", self.G.nodes[n])
                logger_print()
                logger_print("INPUT:", has_input)
                logger_print("OUTPUT:", has_output)
                logger_print()
                raise Exception(f"母线组{id_set}未实现至少一进一出")
        self.is_valid = True
    
    def to_json(self) -> dict:
        data = json_graph.node_link_data(self.G)
        return data

    @staticmethod
    def from_json(data):
        # load data to graph
        G = json_graph.node_link_graph(data)
        kwargs = G.graph
        topo = 拓扑图(**kwargs)
        topo.G = G
        if not ies_env.FAILSAFE:
            topo.check_consistency()
        return topo
    # with checking.
    # iterate through all nodes.

# 下面的都需要传拓扑图进来

class 节点:
    def __init__(self, topo:拓扑图, **kwargs):
        self.topo = topo
        self.kwargs = kwargs
        self.id = self.topo.add_node(**kwargs)

class 母线(节点):
    def __init__(self, topo:拓扑图, subtype:str, **kwargs):
        super().__init__(topo, type="母线", subtype=subtype ,conn = [],**kwargs)
        # infinite ports.
        

class 设备(节点):
    def __init__(self, topo:拓扑图, device_type:str, port_definition, # iterable. 
    **kwargs):
        # check if device type is one of the common types.
        super().__init__(topo, type="设备", subtype=device_type, ports={}, **kwargs)
        self.ports = {}
        for port_name, port_type in port_definition:
            port_node_id = self.topo.add_node(type="锚点", port_name=port_name, subtype=port_type, device_id = self.id)
            self.ports.update({port_name: {"subtype": port_type,"id":port_node_id}})
            self.topo.G.add_edge(self.id, port_node_id)
            {# logger_print("EDGE IDS:", self.id, port_node_id)
            breakpoint() #}
        self.topo.G.nodes[self.id]['ports'] = self.ports

class 连接节点(节点):
    def __init__(self, topo:拓扑图, _type:str, subtype:str, conn_start_id:int, conn_end_id:int, **kwargs):
        super().__init__(topo, type=_type, subtype = subtype, **kwargs)
        self.topo.G.add_edge(conn_start_id, self.id)
        self.topo.G.add_edge(self.id, conn_end_id)
        if self.topo.G.nodes[conn_start_id]["type"] == "母线":
            self.topo.G.nodes[conn_start_id]["conn"].append(subtype)
        if self.topo.G.nodes[conn_end_id]["type"] == "母线":
            self.topo.G.nodes[conn_end_id]["conn"].append(subtype)

{% macro makeConnNodeInstance(className) %}

class {{className}}(连接节点):
    def __init__(self, topo:拓扑图, subtype:str, conn_start_id:int, conn_end_id:int, **kwargs):
        super().__init__(topo, _type="{{className}}", subtype = subtype, conn_start_id= conn_start_id, conn_end_id=conn_end_id, **kwargs)

{% endmacro %}

{{ makeConnNodeInstance("连接线") }}

{{ makeConnNodeInstance("合并线") }}

{% macro makeDevice(device_name, port_definition) %}
class {{device_name}}(设备):
    def __init__(self, topo:拓扑图, **kwargs):
        super().__init__(topo=topo, device_type="{{device_name}}",  port_definition={{port_definition}}, **kwargs)

        {% for port_name, port_type in port_definition %}
        self.{{ port_name }} = self.ports["{{port_name}}"]['id']
        {% endfor %}
{% endmacro %}

{% for device_name, port_definition in 设备接口集合.items() %}

{{makeDevice(device_name, port_definition)}}

{% endfor %}