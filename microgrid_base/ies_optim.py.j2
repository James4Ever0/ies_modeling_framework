# the main code for computing.
# currently just compute microgrid
# three computation modes:

# 8760 hours of data
# several days of data to compute a year

# 7200 seconds. simulation

# device parameters would be the same.

# load and environment might change.

# so for every device the will change.

# iterate through all device-port pairs, then retrieve attributes from another dict.

from pydantic import BaseModel
from typing import List
# string, digits, tables.
# you can dump and load from json.
{# 
class 加法器ID(BaseModel):
    输入:int
    输出:int
    输入输出: int #}

{% for super_class, class_name, mstrs, mdigits, mtables in 设备库 %}

class {{class_name}}ID(BaseModel):
    设备: int
    {% for port_name, port_type in 设备接口集合[class_name]%}
    {{ port_name }}: int
    """
    类型: {{ port_type }}
    """
    {% endfor %}

class {{class_name}}信息(BaseModel): # {{super_class}}
    {% for mstr in mstrs %}
    {{ mstr }}: str

    {% endfor %}
    
    {% for mdigit in mdigits %}
    {{ mdigit[0] }}: float
    """
    名称: {{ mdigit[1]}}
    单位: {{mdigit[2]}}
    """

    {% endfor %}

    {% for mtable in mtables %}
    {{ mtable[0][0]}}_{{ mtable[1][0]}} : List[List[float]]
    """
    {{ mtable[0][0]}}: {{ mtable[0][1]}}
    单位: {{ mtable[0][2]}}

    {{ mtable[1][0]}}: {{ mtable[1][1]}}
    单位: {{ mtable[1][2]}}
    """

    {% endfor %}
{% endfor %}

# model structure.

from pyomo.environ import *

# first convert the unit.
# assign variables.

# shall you assign port with variables.

class 计算参数(BaseModel):
    @property
    def 迭代步数(self):
    @property
    def 典型日列表(self):

class 设备模型:
    def __init__(self, model:ConcreteModel, 计算参数实例: ..., ID):
        self.model = model
        self.计算参数 = 计算参数实例
        self.ID = ID

    def getVarName(self, varName:str):
        return f"DI[{self.ID}]_VN[{varName}]"

    def 单变量(self, varName:str):
        return self.model.__dict__[self.getVarName(varName)] = Var()

    def 变量列表(self, varName:str):
        return self.model.__dict__[self.getVarName(varName)] = Var(range(self.计算参数.迭代步数))

    def 典型日变量列表(self, varName:str):
        varList = []
        for i in range(len(self.计算参数.典型日列表)):
            var = self.model.__dict__[f"典型日[{i}]_"self.getVarName(varName)] = Var(range(24))
            varList.append(var)
        return varList

{% for super_class, class_name, mstrs, mdigits, mtables in 设备库 %}
class {{class_name}}模型():
    def __init__(self, model: ConcreteModel, 计算参数实例: ..., 设备ID: {{ class_name }}ID, 设备信息: {{ class_name }}信息):
        super().__init__(model=model, 计算参数=计算参数实例, ID= 设备ID.id)
        self.设备ID = 设备ID
        self.设备信息 = 设备信息

        {% for mdigit in mdigits %}
        self.{{ mdigit[0] }}: float = 设备信息.{{ mdigit[0] }} * {{ mdigit[4]}}
        """
        名称: {{ mdigit[1] }}
        单位: {{ mdigit[3] }} <- {{ mdigit[2] }}
        """

        {% endfor %}

        {% for mtable in mtables %}
        self.{{ mtable[0][0]}}_{{ mtable[1][0]}} : List[List[float]] = [[v1 * {{mtable[0][4]}}, v2 * {{mtable[1][4]}}] for v1, v2 in 设备信息.{{ mtable[0][0]}}_{{ mtable[1][0]}}]
        """
        {{ mtable[0][0]}}: {{ mtable[0][1]}}
        单位: {{ mtable[0][2]}}

        {{ mtable[1][0]}}: {{ mtable[1][1]}}
        单位: {{ mtable[1][2]}}
        """

        {% endfor %}
    
    def constraints_register(self):
        self.model.__dict__['{{}}'] = Var()
{% endfor %}
