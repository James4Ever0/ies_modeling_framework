from log_utils import logger_print
from log_utils import logger_traceback
from type_utils import dynamic_verify_topo_object

import networkx
from networkx.readwrite import json_graph
from config import ies_env
from pydantic import BaseModel

from typing import List, Dict, Literal

# when to check topology:
# 	1.  Building topology <- which the frontend does the job
# 	2.  Importing topology <- where algorithm kicks in

# so here we only check topo when importing. we don't check validity during topo construction.


# 母线最多99个对接的接口


def getMainAndSubType(data):
    logger_print("DATA:", data)
    return data["type"], data["subtype"]


def getMainType(data):
    logger_print("DATA:", data)
    return data["type"]


# better use some template.
# 设备、母线、连接线、合并线

设备类型 = {{设备类型}}


设备接口名称集合 = {{设备接口名称集合}}

directionLookupTable = {{directionLookupTable}}

class NodeStruct(BaseModel):
    id:int
    type:str
    subtype:str
    direction:Literal[None, "输入输出", "输入", "输出"] = None

def constructAdder() -> Dict[str,List[int]]:
    return {"input": [], "output": [], "IO": []}

def parse_node_struct_and_update_adder(node:NodeStruct, adder:Dict[str,List[int]]):
    # this is the main reason you cannot make subtype passed from frontend.
    # TODO: resolve direction from rules

    direction = node.direction
    if direction == "输入输出":
        adder["IO"].append(node.id)
    elif direction == "输入":
        adder["output"].append(node.id)
    elif direction == "输出":
        adder["input"].append(node.id)
    elif direction is None:
        raise Exception("direction is not specified in node struct:", node)
    else:
        raise Exception("Unknown direction for node:", node)

def get_node_struct_from_node_id_and_node_data(node_id, node_data):
    _type = node_data["type"]
    subtype = node_data["subtype"]
    direction = node_data.get('direction', None)
    node_struct = NodeStruct(id = node_id, type= _type, subtype=subtype, direction = direction)
    return node_struct

def lookup_port_direction(device_name, node_name):
    direction = directionLookupTable[device_name][node_name]
    return direction

class 拓扑图:
    def __init__(self, **kwargs):
        self.node_count = 0
        self.G = networkx.Graph(**kwargs)
        self.合并母线ID集合列表 = []
        self.is_valid = ies_env.FAILSAFE
    
    def get_direction_from_node_id(self, node_id):
        direction = None
        node_data = self.G.nodes[node_id]
        if node_data['type'] == '锚点':
            node_name = node_data['port_name']
            for neighbor_id in self.G.neighbors(node_id):
                neighbor_data = self.G.nodes[neighbor_id]
                if neighbor_data['type'] == '设备':
                    device_name = neighbor_data['subtype']
                    direction = lookup_port_direction(device_name, node_name)
        return direction

    def get_node_struct_from_node_id(self, node_id):
        node_data = self.G.nodes[node_id]

        direction = self.get_direction_from_node_id(node_id)

        if direction is not None:
            node_data['direction'] = direction

        node_struct = get_node_struct_from_node_id_and_node_data(node_id, node_data)
        return node_struct

    def get_left_and_right_node_struct_from_connector_node_index(self, node_index):
        left_id, right_id = self.G.neighbors(node_index)
        left_node_struct, right_node_struct = self.get_node_struct_from_node_id(left_id), self.get_node_struct_from_node_id(right_id)
        return left_node_struct, right_node_struct

    def get_all_devices(self) -> list:
        devs = []
        for node_index, node_data in self.G.nodes.items():
            node_type = node_data["type"]
            node_data["id"] = node_index

            if node_type == "设备":
                devs.append(node_data)
        return devs

    def get_all_adders(self) -> dict:  # don't care about types here.
        # use adder ids. adder starts with -1
        adders = {
            min(s): constructAdder() for s in self.合并母线ID集合列表
        }  # 用到：合并母线ID集合列表
        adder_id = -1
        母线ID映射表 = {e: min(s) for s in self.合并母线ID集合列表 for e in s}
        # format: {"input":input_ids, "output": output_ids, "IO": IO_ids}
        for node_index, node_data in self.G.nodes.items():
            node = get_node_struct_from_node_id_and_node_data(node_index, node_data)
            {# node.type = node_data["type"] #}
            if node.type == "连接线":
                #  检查连接线两端
                left, right = self.get_left_and_right_node_struct_from_connector_node_index(node_index)

                if left.type == "母线" and right.type == "锚点": # swap
                    right, left = left, right

                if left.type == "锚点" and right.type == "锚点":
                    adder = constructAdder()

                    parse_node_struct_and_update_adder(left, adder)
                    parse_node_struct_and_update_adder(right, adder)

                    adders[adder_id] = adder
                    adder_id -= 1

                elif left.type == "锚点" and right.type == "母线":
                    madder_id = 母线ID映射表[right.id]

                    adder = adders[madder_id]
                    parse_node_struct_and_update_adder(left, adder)

                else:
                    raise Exception(
                        f"不合理的连接线两端：{left.type}[{left.subtype}]-{right.type}[{right.subtype}]"
                    )

        return adders

    def get_graph_data(self) -> dict:  # primary data. shall be found somewhere.
        graph_data = self.G.graph
        return graph_data

    def add_node(self, **kwargs):
        self.G.add_node(self.node_count, **kwargs)
        node_id = self.node_count
        self.node_count += 1
        return node_id

    def get_neighbors_by_node_id(self, node_id):
        neighbors = list(self.G.neighbors(node_id))
        logger_print(f"NEIGHBORS FOR NODE #{node_id}:", neighbors)
        for n in neighbors:
            logger_print(self.G.nodes[n])
        return neighbors
    
    # monotonically adding a node.
    def _check_consistency(self):  # return nothing.
        #  use subgraph
        # 提取所有母线ID
        母线ID列表 = []
        合并线ID列表 = []

        for node_id, node_data in self.G.nodes.items():
            node = get_node_struct_from_node_id_and_node_data(node_id, node_data)

            logger_print("NODE TYPE:", node.type)
            logger_print("NODE SUBTYPE:", node.subtype)

            neighbors = self.get_neighbors_by_node_id(node.id)
            neighbors_count = len(neighbors)

            logger_print("=" * 40)

            if node.type == "母线":
                母线ID列表.append(node.id)
                assert (
                   neighbors_count <= 99
                ), f"节点 #{node.id} 母线连接数超过99: {neighbors_count}"

                for n in neighbors:
                    ne_data = self.G.nodes[n]
                    ne_type, ne_subtype = getMainAndSubType(ne_data)

                    if ne_type in ["合并线", "连接线"]:
                        pass
                    else:
                        raise Exception(f"节点 #{n} {node.subtype}连接非法类型节点：", ne_type)
            elif node.type == "设备":
                try:
                    assert node.subtype in 设备类型, f"节点 #{node.id} 不存在的设备类型: {node.subtype}"
                    port_name_set = set()

                    for n in neighbors:
                        ne_data = self.G.nodes[n]
                        ne_type, ne_subtype = getMainAndSubType(ne_data)

                        port_name = ne_data["port_name"]
                        assert ne_type == "锚点", f"节点 #{n} 错误的节点类型: {ne_type}"
                        assert (
                            len(list(self.G.neighbors(n))) == 2
                        ), f"节点 #{n} 相邻节点数错误: {len(list(self.G.neighbors(n)))} 相邻节点: {(list(self.G.neighbors(n)))}"
                        port_name_set.add(port_name)
                        {# port_set.add((port_name, ne_subtype)) #}

                    assert (
                        port_name_set == 设备接口名称集合[node.subtype]
                    ), f"节点 #{node.id}  PORT SET: {port_name_set} TARGET: {设备接口名称集合[node.subtype]}"
                except Exception as e:
                    if ies_env.FAILSAFE or ies_env.IGNORE_ANCHOR_EXCEPTIONS:
                        logger_print("Ignoring exception in device type:", node.subtype)
                        logger_traceback(e)
                    else:
                        raise e
            elif node.type == "连接线":
                {# assert node.subtype in 连接线类型, f"节点 #{node.id} 不合理连接线类型： {node.subtype}" #}
                assert (
                    len(neighbors) == 2
                ), f"节点 #{node.id} 不合理连接线相邻节点数: {len(neighbors)} 相邻节点: {neighbors}"
                dev_ids = set()
                subtypes = []

                for n in neighbors:
                    ne_data = self.G.nodes[n]
                    ne_type, ne_subtype = getMainAndSubType(ne_data)

                    assert ne_type in ["锚点", "母线"]
                    {# subtypes.append(ne_subtype) #}
                    if ne_type == "锚点":
                        dev_ids.add(ne_data["device_id"])
                    else:
                        dev_ids.add(n)
                assert (
                    len(dev_ids) == 2
                ), f"节点 #{node.id} invalid dev_ids: {dev_ids}"  # no self-connection.
                {# try:
                    assert 连接类型映射表[frozenset(subtypes)] == node.subtype
                except:
                    raise Exception(
                        f"节点 #{node.id} 未知连接组合: (两端: {subtypes} 连接线: {node.subtype})"
                    ) #}
            elif node.type == "合并线":
                合并线ID列表.append(node.id)
                {# assert node.subtype in 合并线类型, f"节点 #{node.id} 未知合并线类型: {node.subtype}" #}
                assert (
                    len(neighbors) == 2
                ), f"节点 #{node.id} 不合理相邻节点数: {len(neighbors)} 相邻节点: {len(neighbors)}"
                node_ids = set()

                for n in neighbors:
                    ne_data = self.G.nodes[n]
                    ne_type, ne_subtype = getMainAndSubType(ne_data)

                    assert ne_type == "母线", f"节点 #{n} 不合理类型: {ne_type}"
                    node_ids.add(n)
                assert (
                    len(node_ids) == 2
                ), f"节点 #{node.id} 不合理合并线总节点数：{len(node_ids)} 节点列表: {node_ids}"
            elif node.type == "锚点":
                continue
            else:
                raise Exception("unknown node type:", node.type)
        subgraph = self.G.subgraph(母线ID列表 + 合并线ID列表)  # check again.
        logger_print("母线ID列表:", 母线ID列表)
        self.合并母线ID集合列表 = list(networkx.connected_components(subgraph))
        self.合并母线ID集合列表 = [
            set([i for i in e if i not in 合并线ID列表]) for e in self.合并母线ID集合列表
        ]
        logger_print("合并母线ID集合列表:", self.合并母线ID集合列表)
    
    def check_consistency(self):
        self._check_consistency()
        verified = False
        isomorphic_topo_status = None
        if ies_env.DYNAMIC_TYPE_VERIFICATION:
            verified, isomorphic_topo_status = dynamic_verify_topo_object(self)
        else:
            logger_print("skipping dynamic verification")
            verified = True
        if not verified:
            raise Exception("Dynamical verification failed.")
        self.is_valid = True
        return verified, isomorphic_topo_status

    def to_json(self) -> dict:
        data = json_graph.node_link_data(self.G)
        return data

    @staticmethod
    def from_json(data):
        # load data to graph
        G = json_graph.node_link_graph(data)
        kwargs = G.graph
        topo = 拓扑图(**kwargs)
        topo.G = G
        try:
            topo.check_consistency()
        except Exception as e:
            if not ies_env.FAILSAFE:
                raise e
            else:
                logger_traceback(e)
                logger_print("检测到拓扑图不合法，但仍然继续运行")
        return topo

    # with checking.
    # iterate through all nodes.


# 下面的都需要传拓扑图进来


class 节点:
    def __init__(self, topo: 拓扑图, **kwargs):
        self.topo = topo
        self.kwargs = kwargs
        self.id = self.topo.add_node(**kwargs)


class 母线(节点):
    def __init__(self, topo: 拓扑图, subtype: str, **kwargs):
        super().__init__(topo, type="母线", subtype=subtype, conn=[], **kwargs)
        # infinite ports.


class 设备(节点):
    def __init__(
        self, topo: 拓扑图, device_type: str, port_definition, **kwargs  # iterable.
    ):
        # check if device type is one of the common types.
        super().__init__(topo, type="设备", subtype=device_type, ports={}, **kwargs)
        self.ports = {}
        for port_name in port_definition:
            subtype = 'unknown'
            port_node_id = self.topo.add_node(
                type="锚点", port_name=port_name, subtype=subtype, device_id=self.id
            )
            self.ports.update({port_name: {"subtype": subtype, "id": port_node_id}})
            self.topo.G.add_edge(self.id, port_node_id)
        self.topo.G.nodes[self.id]["ports"] = self.ports


class 连接节点(节点):
    def __init__(
        self,
        topo: 拓扑图,
        _type: str,
        subtype: str,
        conn_start_id: int,
        conn_end_id: int,
        **kwargs,
    ):
        super().__init__(topo, type=_type, subtype=subtype, **kwargs)
        self.topo.G.add_edge(conn_start_id, self.id)
        self.topo.G.add_edge(self.id, conn_end_id)
        if self.topo.G.nodes[conn_start_id]["type"] == "母线":
            self.topo.G.nodes[conn_start_id]["conn"].append(subtype)
        if self.topo.G.nodes[conn_end_id]["type"] == "母线":
            self.topo.G.nodes[conn_end_id]["conn"].append(subtype)

{% macro makeConnNodeInstance(className) %}

class {{className}}(连接节点):
    def __init__(self, topo:拓扑图, subtype:str, conn_start_id:int, conn_end_id:int, **kwargs):
        super().__init__(topo, _type="{{className}}", subtype = subtype, conn_start_id= conn_start_id, conn_end_id=conn_end_id, **kwargs)

{% endmacro %}

{{ makeConnNodeInstance("连接线") }}

{{ makeConnNodeInstance("合并线") }}

{% macro makeDevice(device_name, port_definition) %}
class {{device_name}}(设备):
    def __init__(self, topo:拓扑图, **kwargs):
        super().__init__(topo=topo, device_type="{{device_name}}",  port_definition={{port_definition}}, **kwargs)

        {% for port_name in port_definition %}
        {# {% for port_name, port_type in port_definition %} #}
        self.{{ port_name }} = self.ports["{{port_name}}"]['id']
        {% endfor %}
{% endmacro %}

{% for device_name, port_definition in 设备接口名称集合.items() %}

{{makeDevice(device_name, port_definition)}}

{% endfor %}