from pyscipopt import Model

model = Model("Example")  # model name is optional

print(dir(model))
# ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '_addGenNonlinearCons', '_addLinCons', '_addNonlinearCons', '_addQuadCons', '_freescip', 'activateBenders', 'addBendersSubproblem', 'addCons', 'addConsAnd', 'addConsCardinality', 'addConsCoeff', 'addConsIndicator', 'addConsLocal', 'addConsNode', 'addConsOr', 'addConsSOS1', 'addConsSOS2', 'addConsXor', 'addConss', 'addCut', 'addObjoffset', 'addPoolCut', 'addPyCons', 'addRowDive', 'addSol', 'addVar', 'addVarLocks', 'addVarSOS1', 'addVarSOS2', 'addVarToRow', 'appendVarSOS1', 'appendVarSOS2', 'applyCutsProbing', 'backtrackProbing', 'branchVar', 'branchVarVal', 'cacheRowExtensions', 'calcChildEstimate', 'calcNodeselPriority', 'catchEvent', 'catchRowEvent', 'catchVarEvent', 'checkBendersSubproblemOptimality', 'checkQuadraticNonlinear', 'checkSol', 'chgLhs', 'chgReoptObjective', 'chgRhs', 'chgRowLhsDive', 'chgRowRhsDive', 'chgVarBranchPriority', 'chgVarLb', 'chgVarLbDive', 'chgVarLbGlobal', 'chgVarLbNode', 'chgVarLbProbing', 'chgVarObjDive', 'chgVarObjProbing', 'chgVarType', 'chgVarUb', 'chgVarUbDive', 'chgVarUbGlobal', 'chgVarUbNode', 'chgVarUbProbing', 'computeBestSolSubproblems', 'constructLP', 'count', 'createChild', 'createCons', 'createEmptyRowSepa', 'createEmptyRowUnspec', 'createPartialSol', 'createProbBasic', 'createSol', 'data', 'delCons', 'delConsLocal', 'delVar', 'disablePropagation', 'dropEvent', 'dropRowEvent', 'dropVarEvent', 'enableReoptimization', 'endDive', 'endProbing', 'epsilon', 'feasFrac', 'feastol', 'fixVar', 'fixVarProbing', 'flushRowExtensions', 'frac', 'freeBendersSubproblems', 'freeProb', 'freeReoptSolve', 'freeSol', 'freeTransform', 'from_ptr', 'getActivity', 'getBendersAuxiliaryVar', 'getBendersSubproblem', 'getBendersVar', 'getBestChild', 'getBestLeaf', 'getBestNode', 'getBestSibling', 'getBestSol', 'getBestboundNode', 'getCondition', 'getConss', 'getCurrentNode', 'getCutEfficacy', 'getCutLPSolCutoffDistance', 'getDepth', 'getDualMultiplier', 'getDualSolVal', 'getDualbound', 'getDualboundRoot', 'getDualfarkasLinear', 'getDualsolLinear', 'getGap', 'getLPBInvARow', 'getLPBInvRow', 'getLPBasisInd', 'getLPBranchCands', 'getLPColsData', 'getLPObjVal', 'getLPRowsData', 'getLPSolstat', 'getLhs', 'getLocalEstimate', 'getNBestSolsFound', 'getNBinVars', 'getNChildren', 'getNConss', 'getNCountedSols', 'getNCuts', 'getNCutsApplied', 'getNFeasibleLeaves', 'getNInfeasibleLeaves', 'getNIntVars', 'getNLPCols', 'getNLPIterations', 'getNLPRows', 'getNLPs', 'getNLeaves', 'getNLimSolsFound', 'getNNlRows', 'getNNodes', 'getNReaders', 'getNSepaRounds', 'getNSiblings', 'getNSols', 'getNSolsFound', 'getNTotalNodes', 'getNVars', 'getNlRowActivityBounds', 'getNlRowSolActivity', 'getNlRowSolFeasibility', 'getNlRows', 'getObjVal', 'getObjective', 'getObjectiveSense', 'getObjlimit', 'getObjoffset', 'getOpenNodes', 'getParam', 'getParams', 'getPresolvingTime', 'getPrimalbound', 'getProbName', 'getProbingDepth', 'getPseudoBranchCands', 'getReadingTime', 'getRhs', 'getRowActivity', 'getRowDualSol', 'getRowLPActivity', 'getRowLinear', 'getRowNumIntCols', 'getRowObjParallelism', 'getRowParallelism', 'getSlack', 'getSlackVarIndicator', 'getSolObjVal', 'getSolVal', 'getSols', 'getSolvingTime', 'getStage', 'getStatus', 'getTermsQuadratic', 'getTotalTime', 'getTransformedCons', 'getTransformedVar', 'getVal', 'getValsLinear', 'getVarLbDive', 'getVarRedcost', 'getVarUbDive', 'getVars', 'hideOutput', 'inProbing', 'inRepropagation', 'includeBenders', 'includeBendersDefaultCuts', 'includeBenderscut', 'includeBranchrule', 'includeConshdlr', 'includeCutsel', 'includeDefaultPlugins', 'includeEventhdlr', 'includeHeur', 'includeNodesel', 'includePresol', 'includePricer', 'includeProp', 'includeReader', 'includeRelax', 'includeSepa', 'infinity', 'initBendersDefault', 'interruptSolve', 'isCutEfficacious', 'isEQ', 'isFeasEQ', 'isFeasIntegral', 'isFeasNegative', 'isFeasZero', 'isGE', 'isGT', 'isInfinity', 'isLE', 'isLPSolBasic', 'isLT', 'isNLPConstructed', 'isObjChangedProbing', 'isZero', 'lpiGetIterations', 'newProbingNode', 'optimize', 'presolve', 'printBestSol', 'printCons', 'printNlRow', 'printRow', 'printSol', 'printStatistics', 'printVersion', 'propagateProbing', 'readParams', 'readProblem', 'readSol', 'readSolFile', 'redirectOutput', 'releaseRow', 'repropagateNode', 'resetParam', 'resetParams', 'restartSolve', 'rowGetNNonz', 'separateSol', 'setBendersSubproblemIsConvex', 'setBoolParam', 'setCharParam', 'setCheck', 'setEmphasis', 'setEnforced', 'setHeuristics', 'setInitial', 'setIntParam', 'setLogfile', 'setLongintParam', 'setMaximize', 'setMinimize', 'setObjIntegral', 'setObjective', 'setObjlimit', 'setParam', 'setParams', 'setParamsCountsols', 'setPresolve', 'setProbName', 'setRealParam', 'setRelaxSolVal', 'setRemovable', 'setSeparating', 'setSolVal', 'setStringParam', 'setupBendersSubproblem', 'solveBendersSubproblem', 'solveConcurrent', 'solveDiveLP', 'solveProbingLP', 'startDive', 'startProbing', 'tightenVarLb', 'tightenVarLbGlobal', 'tightenVarUb', 'tightenVarUbGlobal', 'to_ptr', 'trySol', 'updateBendersLowerbounds', 'updateNodeLowerbound', 'version', 'writeBestSol', 'writeBestTransSol', 'writeLP', 'writeName', 'writeParams', 'writeProblem', 'writeSol', 'writeStatistics', 'writeTransSol']

# help(model.readProblem)
problem_fpath = "no_bound.nl"
# problem_fpath = "no_bound.lp"
model.readProblem(problem_fpath)
# x = model.addVar("x")
# y = model.addVar("y", vtype="INTEGER")
# model.setObjective(x + y)
# model.addCons(2*x - y*y >= 0)
model.optimize()
sol = model.getBestSol()
# print(sol)
# breakpoint()
# {'t_x0': 10.0, 't_x1': 100000.00000000001, 't_x2': 0.0, 't_x3': 0.0}
model.writeSol(sol, "no_bound_scip.sol")
# print("x: {}".format(sol[x]))
# print("y: {}".format(sol[y]))