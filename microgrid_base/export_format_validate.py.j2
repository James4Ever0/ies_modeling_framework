{# from ies_optim import {{ ",".join(model_names) }} #}
{# import device ports. #}
from typing import List

from pyomo.environ import value
from pydantic import BaseModel, validator

{# if unit is one, use "int" as type, else "float"#}
{# timeParam: how many hours have passed #}
from ies_optim import *
import math
from pyomo.core.base.var import IndexedVar

def sumVarList(varList:IndexedVar):
    return sum(varList.values())

def ReLU(val):
    if type(val) not in [int, float]:
        val = value(val)
    if val>0:
        return val
    else:
        return 0

{# where you prepare the export data. #}
{# in simulation mode #}
{% macro BANNER(msg)%}
{% set msglen = 0%}
{% for e in list(msg)%}
    {% set l = ord(e)%}
    {% if l > 500 %}
        {% do msglen +=2%}
    {% else %}
        {% do msglen +=1%}
    {% endif %}
{% endfor %}
{{ "#" * (msglen+4)}}
# {{msg}} #
{{ "#" * (msglen+4)}}
{% endmacro %}
{% set exceptionList = ["平均效率_平均COP"] %}
{% set commonParamNames = [
    "元件名称",
    "设备型号",
    "设备台数",
    "设备维护费用",
    "时间"
]%}
{% macro iterParamDict(paramDict, has_list) %}
    {% set flag = namespace(val=False)%}
    {% for paramName, paramDef in paramDict.items() %}
        {% set PN = paramName.replace("/","_") %}
        {% if flag.val == False%}
            {% if PN not in commonParamNames%}
                {% set flag.val=True%}
    ## UNIQ PARAMS ##
            {% endif%}
        {% endif%}
        {% if paramDef == None %}
            {% set t = 'str'%}
        {% elif paramDef[1] == 'one' and paramDef[0] == 1 and PN not in exceptionList %}
            {% set t = 'int'%}
        {% else%}
            {% set t = 'float'%}
        {% endif %}
    {{PN}} :{{'List[{}]'.format(t) if ( t!='str' and has_list) else t}}
        {% if t!='str' %}
    {# mag, std, old #}
    """
    单位: {{paramDef[2] if paramDef[0] == 1 else "{} <- {}".format(paramDef[2], paramDef[1])}}
    """
            {% if paramDef[0] !=1 %}
    @validator("{{PN}}")
    def standard_unit_to_custom_{{PN}}(cls, v):
        return [e / {{paramDef[0]}} for e in v]
            {% endif %}
        {% endif %}
        
    {% endfor %}
{% endmacro %}
{% macro TP(val)%}(({{val}}) * timeParam){%endmacro%}
{%macro VLIST(vlist)%}[value(e) for e in {{vlist}}.values()]{% endmacro%}
{%macro VLISTPOS(vlist)%}[ReLU(e) for e in {{vlist}}]{% endmacro%}
{%macro VLISTNEG(vlist)%}[-ReLU(-e) for e in {{vlist}}]{% endmacro%}
{%macro MVLIST(vlist)%}math.mean({{VLIST(vlist)}}){% endmacro%}
{%macro MVLISTPOS(vlist)%}math.mean({{VLISTPOS(vlist)}}){% endmacro%}
{%macro MVLISTNEG(vlist)%}math.mean({{VLISTNEG(vlist)}}){% endmacro%}
{% macro TP_MVLIST(vlist)%}{{TP(MVLIST(vlist))}}{% endmacro%}
{% macro BIDIR_SINGLE_CVT(x,y)%}((sumVarList(model.{{x}}.x_pos)/sumVarList(model.{{y}}.x_neg)) * sumVarList(model.{{x}}.b_pos)){%endmacro%}
{% macro BIDIR_CVT_COP(x,y)%}value(BIDIR_SINGLE_CVT(x,y)+ BIDIR_SINGLE_CVT(y,x))/model.计算参数.迭代步数{% endmacro%}
{% set EPS = "1e-10"%}
{% set commonSimParams = {
    "产电量": TP_MVLIST("model.电接口"),
    "柴油消耗量": TP_MVLIST("model.燃料接口")
    "单向电转换COP": "- ({}) / ({} + {})".format(MVLIST("model.电输入"), MVLIST("model.电输出"), EPS)
}%}
{% set CSPL = {} %}
{% macro dictValueToKeyValuePair(a,b)%}
{% for k,v in a.items() %}
    {% do b.update({k: (k,v)}) %}
{% endfor%}
{% endmacro%}
{% do dictValueToKeyValuePair(commonSimParams, CSPL)%}
{% set simDevParamMapping = {
    "柴油": [
        ("柴油消耗费用", TP("value(model.总成本年化)"))
    ],
    "电负荷": [
        ("电负荷", TP("math.mean(model.设备信息.EnergyConsumption)"))
    ],
    "光伏发电": [
        CSPL['产电量']
    ],
    "风力发电": [
        CSPL['产电量']
    ],
    "柴油发电": [
        CSPL['产电量'],
        CSPL['柴油消耗量'],
        ("平均效率_平均COP","({})/(model.燃料热值 * ({}) + {})".format(commonSimParams['产电量'],commonSimParams['柴油消耗量'], EPS))
    ],
    "锂电池":[
        ("平均效率_平均COP", ("ReLU(({} - ({}))/ (-({}) + {}))".format(TP_MVLISTPOS("model.电接口"), "model.InitSOC * model.TotalCapacity", TP_MVLISTNEG("model.电接口"), EPS)))
    ], 
    "变压器":[
        ("平均效率_平均COP", CSPL['单向电转换COP'])
    ],
    "变流器": [
        ("平均效率_平均COP", CSPL['单向电转换COP'])
    ],
    "双向变流器": [
        ("平均效率_平均COP", BIDIR_CVT_COP("储能端_","线路端_"))
    ],
    "传输线": [
        ("平均效率_平均COP", CSPL['单向电转换COP'])
    ]
}%}
{# 柴油发电等的燃料热值在解析拓扑结构的时候进行确定 #}

{% macro export_data_with_model(devName, obj)%}
    @staticmethod
    def export(model: {{devName}}模型, timeParam:float):
    {% do obj.update(dict(元件名称 = "model.设备名称")) %}
{{caller()}}
        return {{devName}}仿真结果(
    {% for key, value in obj.items() %}
            {{key}} = {{value}},
    {% endfor %}
        )
{% endmacro%}

{{ BANNER("仿真结果")}}

{% for devName, paramDict in main_data['仿真结果'].items() %}
    {% if devName == 'ALL' %}
        {% continue %}
    {% endif %}
class {{devName}}仿真结果(BaseModel):
{{iterParamDict(paramDict, False)}}
{% set obj = {} %}
{% call export_data_with_model(devName, obj)%}
    {% if devName not in nonDevNames %}
        {% do obj.update(
            dict(
            设备型号 = "model.设备型号",
            设备台数 = "value(model.DeviceCount)",
            设备维护费用 = TP("value(model.年化率 * self.总固定维护成本 + self.总可变维护成本年化)"),
            )
        )
        %}
    {% endif %}
    {% if devName in simDevParamMapping.keys()%}
        {% if len(simDevParamMapping[devName]) == 0%}
            {% error "设备'{}'的独有参数未设置".format(devName)%}
        {% endif%}
        {% for k, v in simDevParamMapping[devName]%}
            {% if k in commonParamNames%}
                {% error("设备'{}'的参数'{}'不是独有参数".format(devName, k)) %}
            {% endif%}
            {% do obj.update({k = v}) %}
        {% endfor%}
    {% else%}
        {% error "设备'{}'没有独有参数".format(devName)%}
    {% endif%}
{% endcall%}
{% endfor %}

{% set commonTimeSeries = dict(
 发电功率=VLIST('model.电接口'),
 充电功率=VLISTNEG('model.电接口'),
 放电功率=VLISTPOS('model.电接口'),
 荷电容量=VLIST('model.CurrentTotalCapacity')
 荷电状态=VLIST('model.CurrentTotalCapacity')
)
%}
{% set CTSL = {}%}
{% do dictValueToKeyValuePair(commonTimeSeries, CTSL) %}
{% set timeSeriesMapping = {
    "光伏发电": [
       CTSL['发电功率']
    ],
    "柴油发电":
    [
        CTSL['发电功率']
    ],
    "锂电池":
    [
        CTSL['充电功率'],
        CTSL['放电功率'],
        CTSL['荷电容量'],
        CTSL['荷电状态']
    ]
}
%}

{# use "call" here. #}
{{ BANNER("设备出力曲线")}}

{% for devName, paramDict in main_data['设备出力曲线'].items() %}
class {{devName}}出力曲线(BaseModel):
{{iterParamDict(paramDict, True)}}
{% set obj = {}%}
{% do obj.update(dict(时间="list(range(model.计算参数.迭代步数))"))%}
{% call export_data_with_model(devName, obj)%}
        {% if %}
{% endcall%}
{% endfor %}