{# from ies_optim import {{ ",".join(model_names) }} #}
{# import device ports. #}
from typing import List
from pyomo.environ import value

from pydantic import BaseModel, validator
{# if unit is one, use "int" as type, else "float"#}

{# where you prepare the export data. #}
{# in simulation mode #}
{% set exceptionList = ["平均效率_平均COP"] %}

{% macro iterParamDict(paramDict, has_list) %}
    {% for paramName, paramDef in paramDict.items() %}
        {% set PN = paramName.replace("/","_")%}
        {% if paramDef == None%}
            {% set t = 'str'%}
        {% elif paramDef[1] == 'one' and paramDef[0] == 1 and PN not in exceptionList%}
            {% set t = 'int'%}
        {% else%}
            {% set t = 'float'%}
        {% endif %}
    {{PN}} :{{'List[{}]'.format(t) if ( t!='str' and has_list) else t}}
        {% if t!='str' %}
    {# mag, std, old #}
    """
    单位: {{paramDef[2] if paramDef[0] == 1 else "{} <- {}".format(paramDef[2], paramDef[1])}}
    """
            {% if paramDef[0] !=1 %}
    @validator("{{PN}}")
    def standard_unit_to_custom_{{PN}}(cls, v):
        return [e / {{paramDef[0]}} for e in v]
            {% endif %}
        {% endif %}
        
    {% endfor %}
{% endmacro %}

{% for devName, paramDict in main_data['仿真结果'].items() %}
    {% if devName == 'ALL' %}
        {% continue %}
    {% endif %}
class {{devName}}仿真结果(BaseModel):
{{iterParamDict(paramDict, False)}}

    @staticmethod
    def export(model: {{devName}}模型, timeParam:float):
        {% set obj = {} %}
        {% do obj.update(dict(元件名称 = "model.设备名称")) %}
        {% if devName not in nonDevNames %}
        {% do obj.update(dict(设备型号 = "model.设备型号")) %}
        {% do obj.update(dict(设备台数 = "value(model.DeviceCount)")) %}
        {% do obj.update(dict(设备维护费用 = "value(model.年化率 * self.总固定维护成本 + self.总可变维护成本年化) * timeParam")) %}
        {% endif %}
        {% do obj.update(dict()) %}
        return {{devName}}仿真结果(
            {% for key, value in obj.items() %}
            {{key}} = {{value}},
            {% endfor %}
        )
{% endfor %}

{% for devName, paramDict in main_data['设备出力曲线'].items() %}
class {{devName}}出力曲线(BaseModel):
{{iterParamDict(paramDict, True)}}

{% endfor %}