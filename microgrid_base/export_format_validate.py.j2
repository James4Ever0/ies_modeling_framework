from ies_optim import {{ ",".join(model_names) }}
{# import device ports. #}
from typing import List
from pydantic import BaseModel, validator
{# if unit is one, use "int" as type, else "float"#}
class 通用结果(BaseModel):
    元件名称:str

class 设备仿真结果(通用结果):
    设备型号:str

    设备台数:int
    """
    单位：one
    """

class 出力曲线(通用结果):
    时间:List[int]
    """
    单位：one
    (根据具体计算步长确定)
    """

{# where you prepare the export data. #}
{# in simulation mode #}
{% for devName, paramDict in main_data['仿真结果'].items() %}
{% if devName == 'ALL' %}
{% continue %}
{% endif %}
class {{...}}仿真结果{{k}}({{x}}):
    if mode == "仿真模拟":
        ...
    elif mode == '设计规划':
        raise NotImplementedError("Not implemented mode:", mode)
    else:
        raise Exception("不合理的计算模式：", mode)
{% endfor%}

{% for devName, paramDict in main_data['设备出力曲线'].items() %}
class {{devName}}出力曲线(出力曲线):
    {% for paramName, paramDef in paramDict.items() %}
    {% if paramDef is None%}
    {% set t = 'str'%}
    {% elif paramDef[1] == 'one' and paramDef[0] == 1%}
    {% set t = 'int'%}
    {% else%}
    {% set t = 'float'%}
    {% endif %}
    {{}} :{{'List[{}]'.format(t) if t != "str" else t}}
    {% if t!='str' %}
    {# mag, std, old #}
    """
    单位: {{paramDef[2] if paramDef[0] == 1 else " <- ".format(paramDef[2], paramDef[1])}}
    """
    {% if paramDef[0] !=1 %}
    @validator("{{paramName}}")
    def standard_unit_to_custom_{{paramName}}(cls, v):
        return [e / {{paramDef[0]}} for e in v]
    {% endif %}
    {% endif %}
    {% endfor %}
{% endfor %}