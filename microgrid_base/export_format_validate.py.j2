{# from ies_optim import {{ ",".join(model_names) }} #}
{# import device ports. #}
{# TODO: check export logic of lithium battery. #}
{# TODO: mark out #}
{% macro assert(expr, message) %}
  {% if expr != true %}
    {% error message %}
  {% endif %}
{% endmacro %}

{# {% set nonCountableDevNames = ['传输线']%} #}
from typing import List
from constants import *
{# import numpy as np #}

from pyomo.environ import value
from pydantic import BaseModel, validator

{# if unit is one, use "int" as type, else "float"#}
{# timeParam: how many hours have passed #}
from ies_optim import *
{# import math #}
import statistics
from pyomo.core.base.var import IndexedVar

def sumVarList(varList:IndexedVar):
    return sum(varList.values())

def addListElem(*args):
    vals = []
    for elem_zip in zip(*args):
        vals.append(sum(elem_zip))
    return vals

import cmath

def safeValue(val):
    try:
        return value(val)
    except:
        return val

def safeDiv(val, div):
    try:
        return safeValue(val)/safeValue(div)
    except:
        return cmath.nan
    {# EPS = 1e-10
    return (val)/(div+EPS if (type(div) not in [int, float] or div == 0 ) else div) #}

def safeAbs(val):
    if type(val) in [str]: return val
    try:
        return abs(val)
    except:
        return cmath.nan

def ReLU(val):
    if type(val) not in [int, float]:
        val = value(val)
    if val>0:
        return val
    else:
        return 0

{# where you prepare the export data. #}
{# in simulation mode #}
{% set totalSimulationTimeInHour = "model.计算参数.总计算时长"%}
{% set 典型日权重 = "(timeParam / {})".format(totalSimulationTimeInHour)%}
{% set 年化权重 = "(timeParam / 每年小时数)" %}
{% set extraParams = {"平均效率_平均COP": 典型日权重} %}
{% macro BANNER(msg)%}
    {% set msglen = namespace(val=0)%}
        {% for e in list(msg)%}
            {% set l = ord(e)%}
            {% if l > 500 %}
                {% set msglen.val =2+msglen.val%}
            {% else %}
                {% set msglen.val =1+msglen.val%}
            {% endif %}
        {% endfor %}
{{ "#" * (msglen.val+4)}}
# {{msg}} #
{{ "#" * (msglen.val+4)}}
{% endmacro %}
{% set exceptionList = ["平均效率_平均COP"] %}
{% set commonParamNames = [
    "元件名称",
    "元件类型",
    "设备型号",
    "设备台数",
    "设备维护费用",
    "时间"
]%}
{% macro iterParamDict(paramDict, has_list) %}
    {% set flag = namespace(val=False) %}
    {% for paramName, paramDef in paramDict.items() %}
        {% set PN = paramName.replace("/","_") %}
        {% if flag.val == False%}
            {% if PN not in commonParamNames %}
                {% set flag.val=True %}
    ## UNIQ PARAMS ##
            {% endif %}
        {% endif %}
        {% if paramDef == None %}
            {% set t = 'str'%}
        {% elif paramDef[1] == 'one' and paramDef[0] == 1 and PN not in exceptionList %}
            {% set t = 'int'%}
        {% else%}
            {% set t = 'float'%}
        {% endif %}
    {{PN}} :{{'List[{}]'.format(t) if ( t!='str' and has_list) else t}}
        {% if t!='str' %}
    {# mag, std, old #}
    {% do .append(paramDef[2])%}
    """
    单位: {{paramDef[2] if paramDef[0] == 1 else "{} <- {}".format(paramDef[2], paramDef[1])}}
    """
            {% if paramDef[0] !=1 %}
    @validator("{{PN}}")
    def standard_unit_to_custom_{{PN}}(cls, v):
                {% if has_list%}
        return [e / {{paramDef[0]}} for e in v]
                {% else%}
        return v / {{paramDef[0]}}
                {% endif%}
            {% endif %}
        {% endif %}

    {% endfor %}
{% endmacro %}
{% macro TP(val)%}(({{val}}) * timeParam){%endmacro%}
{% macro TP_ANNUAL(val)%}(({{val}}) * ({{年化权重}})){%endmacro%}
{% macro IV(vlist)%}for e in {{vlist}}.values(){% endmacro%}
{%macro VLIST(vlist)%}[value(e) {{IV(vlist)}}]{% endmacro%}
{%macro ELIST(elist)%}[value(e) for e in {{elist}}]{% endmacro%}
{% macro VLIST_PAT(vlist, pattern) %}[value({{pattern.format('e')}}) {{IV(vlist)}}]{% endmacro %}
{%macro VLISTINV(vlist)%}[-value(e) {{IV(vlist)}}]{% endmacro%}
{%macro VLISTDIV(vlist, div)%}[value(safeDiv(e,{{div}})) {{IV(vlist)}}]{% endmacro%}
{%macro VLISTPOS(vlist)%}[ReLU(e) {{IV(vlist)}}]{% endmacro%}
{%macro VLISTNEG(vlist)%}[-ReLU(-e) {{IV(vlist)}}]{% endmacro%}
{%macro MVLIST(vlist)%}statistics.mean({{VLIST(vlist)}}){% endmacro%}
{%macro MVLISTPOS(vlist)%}statistics.mean({{VLISTPOS(vlist)}}){% endmacro%}
{%macro MVLISTNEG(vlist)%}statistics.mean({{VLISTNEG(vlist)}}){% endmacro%}
{% macro TP_MVLIST(vlist)%}{{TP(MVLIST(vlist))}}{% endmacro %}
{% macro TP_MVLISTPOS(vlist)%}{{TP(MVLISTPOS(vlist))}}{% endmacro %}
{% macro TP_MVLISTNEG(vlist)%}{{TP(MVLISTNEG(vlist))}}{% endmacro%}
{% macro BIDIR_SINGLE_CVT(x,y)%}(safeDiv(sumVarList(model.{{x}}.x_pos),sumVarList(model.{{y}}.x_neg)) * sumVarList(model.{{x}}.b_pos)){%endmacro%}
{% macro BIDIR_CVT_COP(x,y)%}value({{BIDIR_SINGLE_CVT(x,y)}}+ {{BIDIR_SINGLE_CVT(y,x)}})/model.计算参数.迭代步数{% endmacro%}
{# {% set EPS = "1e-10"%} #}
{% set commonSimParams = {
    "产电量": TP_MVLIST("model.电接口"),
    "柴油消耗量": TP_MVLIST("model.燃料接口"),
    "单向电转换COP": "- safeDiv({},{})".format(MVLIST("model.电输入"), MVLIST("model.电输出")),
    '电收入': TP("-value(model.总成本年化)"),
    "柴油消耗费用": TP("value(model.总成本年化)")
}%}
{% set CSPL = {} %}
{% macro dictValueToKeyValuePair(a,b)%}
{% for k,v in a.items() %}
    {% do b.update({k: (k,v)}) %}
{% endfor %}
{% endmacro %}
{% do dictValueToKeyValuePair(commonSimParams, CSPL) %}
{% set simDevParamMapping = {
    "柴油": [
        CSPL['柴油消耗费用'],
        CSPL['柴油消耗量'],
    ],
    "电负荷": [
        ("电负荷", TP("statistics.mean(model.设备信息.EnergyConsumption)")),
        CSPL['电收入']
    ],
    "光伏发电": [
        CSPL['产电量']
    ],
    "风力发电": [
        CSPL['产电量']
    ],
    "柴油发电": [
        CSPL['产电量'],
        CSPL['柴油消耗量'],
        ("平均效率_平均COP","safeDiv({}, model.燃料热值 * ({}))".format(commonSimParams['产电量'],commonSimParams['柴油消耗量']))
    ],
    "锂电池":[
        ("平均效率_平均COP", ("safeDiv(ReLU(({}) - ({})) , (-({})))".format(TP_MVLISTPOS("model.电接口"), "model.InitSOC * model.TotalCapacity", TP_MVLISTNEG("model.电接口"))))
    ], 
    "变压器":[
        ("平均效率_平均COP", commonSimParams['单向电转换COP'])
    ],
    "变流器": [
        ("平均效率_平均COP", commonSimParams['单向电转换COP'])
    ],
    "双向变流器": [
        ("平均效率_平均COP", BIDIR_CVT_COP("储能端_","线路端_"))
    ],
    "传输线": [
        ("平均效率_平均COP", commonSimParams['单向电转换COP'])
    ]
}%}
{# 柴油发电等的燃料热值在解析拓扑结构的时候进行确定 #}

{% macro export_data_with_model(devName, obj, classType, paramDict, needAbs=False)%}
    @staticmethod
    def export(model: {{devName}}模型, timeParam:float):
    {% do obj.update(dict(元件名称 = "model.设备信息.设备名称")) %}
{{caller()}}
{% set _paramKeys = []%}
{% for key in paramDict.keys() %}
    {% do _paramKeys.append(key.replace("/",'_'))%}
{% endfor%}
{% set paramKeys = _set(_paramKeys) %}
{% set objKeys = _set(obj.keys()) %}
{% do assert(paramKeys.__eq__(objKeys), "devName: {}\n{} (code uniq)\n{} (template uniq)".format(devName, paramKeys.difference(objKeys), objKeys.difference(paramKeys))) %}
        return {{devName}}{{classType}}(
    {% for key, value in obj.items() %}
        {% if needAbs %}
            {{key}} = safeAbs({{value if key not in extraParams.keys() else "({}) * ({})".format(value, extraParams[key])}}),
        {% else %}
            {{key}} = {{value}},
        {% endif %}
    {% endfor %}
        )
{% endmacro%}

{% macro update_obj(obj, paramDict, devName, CPN, check) %}
    {% if devName in paramDict.keys() %}
        {% if len(paramDict[devName]) == 0 %}
            {% error "设备'{}'的独有参数未设置".format(devName) %}
        {% endif%}
        {% for k, v in paramDict[devName]%}
            {% if k in CPN%}
                {% error("设备'{}'的参数'{}'不是独有参数".format(devName, k)) %}
            {% endif%}
            {% do obj.update({k : v}) %}
        {% endfor%}
    {% else%}
        {% if check%}
            {% error "设备'{}'没有独有参数".format(devName)%}
        {% endif%}
    {% endif %}
{% endmacro %}

{{ BANNER("仿真结果") }}

{% for devName, paramDict in main_data['仿真结果'].items() %}
    {% if devName == 'ALL' %}
        {% continue %}
    {% endif %}
class {{devName}}仿真结果(BaseModel):
{{iterParamDict(paramDict, False)}}
{% set obj = {} %}
{% call export_data_with_model(devName, obj, '仿真结果', paramDict, needAbs=True)%}
    {% do obj.update(                
        元件类型 = "model.设备信息.__class__.__name__.strip('信息')"
    )%}
    {% if devName not in nonDevNames %}
        {% do obj.update(
            dict(
                设备型号 = "model.设备信息.设备型号",
                设备维护费用 = TP_ANNUAL("value(model.总固定维护成本 + model.总可变维护成本年化)"),
                )
        )
        %}
        {% if devName not in nonCountableDevNames %}
            {% do obj.update(
                设备台数 = "value(model.DeviceCount)",
            )%}
        {% endif%}
    {% endif %}
    {% do update_obj(obj, simDevParamMapping, devName, commonParamNames, True) %}
{% endcall %}
{% endfor %}

{% set commonTimeSeries = dict(
 发电功率=VLIST('model.电接口'),
 充电功率=VLISTNEG('model.电接口'),
 放电功率=VLISTPOS('model.电接口'),
 荷电容量=VLIST_PAT('model.CurrentTotalCapacity', "{}"),
 荷电状态=VLIST_PAT('model.CurrentTotalCapacity', "safeDiv({} , model.TotalCapacity)"),
 电转换功率=VLIST('model.电输出'),
)
%}
{% set CTSL = {} %}
{% do dictValueToKeyValuePair(commonTimeSeries, CTSL) %}
{% set timeSeriesMapping = {
    "光伏发电": [
       CTSL['发电功率']
    ],
    "风力发电": [
       CTSL['发电功率']
    ],
    "柴油发电":
    [
        CTSL['发电功率']
    ],
    "锂电池":
    [
        ("电功率",VLIST('model.电接口')),
        CTSL['荷电容量'],
        CTSL['荷电状态']
    ],
    "变压器":[
        ('转换功率',commonTimeSeries['电转换功率'])
    ],
    "变流器":[
        ('转换功率', commonTimeSeries['电转换功率'])
    ],
    "双向变流器":[
        ('转换功率', 'addListElem({}, {})'.format(VLIST('model.储能端_.x_pos'),VLIST('model.线路端_.x_pos')))
    ],
    "电负荷":[('耗电功率', VLISTINV('model.电接口'))],
    "传输线":[('传输功率', VLISTINV('model.电输入'))]
}
%}

{# use "call" here. #}
{{ BANNER("设备出力曲线") }}

{% for devName, paramDict in main_data['设备出力曲线'].items() %}
class {{devName}}出力曲线(BaseModel):
{% if devName == '锂电池' %}
    {% do paramDict.pop('放电功率') %}
    {% do paramDict.update(dict(电功率 = paramDict.pop('充电功率'))) %}
    {# {% set paramDict['电功率'] = paramDict.pop('充电功率') %} #}
{% endif%}
{{iterParamDict(paramDict, True)}}
{% set obj = {} %}
{% do obj.update(dict(时间="list(range(model.计算参数.迭代步数))")) %}
{% call export_data_with_model(devName, obj, '出力曲线', paramDict) %}
    {% do update_obj(obj, timeSeriesMapping, devName, [], False) %}
{% endcall %}
{% endfor %}


{# 规划方案概览就是把所有的规划结果详情统计一下放到这里 需要传入方案类型 #}
{# moved to "ies_optim.py" #}