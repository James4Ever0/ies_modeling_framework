{# from ies_optim import {{ ",".join(model_names) }} #}
{# import device ports. #}
from typing import List
from pyomo.environ import value

from pydantic import BaseModel, validator
{# if unit is one, use "int" as type, else "float"#}

from ies_optim import *
import math

{# where you prepare the export data. #}
{# in simulation mode #}
{% set exceptionList = ["平均效率_平均COP"] %}

{% set commonParamNames = [
    "元件名称",
    "设备型号",
    "设备台数",
    "设备维护费用",
    "时间"
]%}

{% macro iterParamDict(paramDict, has_list) %}
    {% set flag = namespace(val=False)%}
    {% for paramName, paramDef in paramDict.items() %}
        {% set PN = paramName.replace("/","_") %}
        {% if flag.val == False%}
            {% if PN not in commonParamNames%}
                {% set flag.val=True%}
    ## UNIQ PARAMS ##
            {% endif%}
        {% endif%}
        {% if paramDef == None %}
            {% set t = 'str'%}
        {% elif paramDef[1] == 'one' and paramDef[0] == 1 and PN not in exceptionList %}
            {% set t = 'int'%}
        {% else%}
            {% set t = 'float'%}
        {% endif %}
    {{PN}} :{{'List[{}]'.format(t) if ( t!='str' and has_list) else t}}
        {% if t!='str' %}
    {# mag, std, old #}
    """
    单位: {{paramDef[2] if paramDef[0] == 1 else "{} <- {}".format(paramDef[2], paramDef[1])}}
    """
            {% if paramDef[0] !=1 %}
    @validator("{{PN}}")
    def standard_unit_to_custom_{{PN}}(cls, v):
        return [e / {{paramDef[0]}} for e in v]
            {% endif %}
        {% endif %}
        
    {% endfor %}
{% endmacro %}

{% macro TP(val)%}({{val}}) * timeParam{%endmacro%}
{%macro VLIST(vlist)%}[value(e) for e in {{vlist}}]{% endmacro%}
{%macro MVLIST(vlist)%}math.mean({{VLIST(vlist)}}){% endmacro%}
{% macro TP_MVLIST(vlist)%}{{TP(MVLIST(vlist))}}{% endmacro%}

{% set simDevParamMapping = {
    "柴油": [
        ("柴油消耗费用", TP("value(model.总成本年化)"))
    ],
    "电负荷": [
        ("电负荷", TP("math.mean(model.设备信息.EnergyConsumption)"))
    ],
    "光伏发电": [
        ("产电量",TP_MVLIST("model.电接口"))
    ],
    "风力发电": [
        ()
    ]
}%}

{% for devName, paramDict in main_data['仿真结果'].items() %}
    {% if devName == 'ALL' %}
        {% continue %}
    {% endif %}
class {{devName}}仿真结果(BaseModel):
{{iterParamDict(paramDict, False)}}

    @staticmethod
    def export(model: {{devName}}模型, timeParam:float):
    {% set obj = {} %}
    {% do obj.update(dict(元件名称 = "model.设备名称")) %}
    {% if devName not in nonDevNames %}
        {% do obj.update(
            dict(
            设备型号 = "model.设备型号",
            设备台数 = "value(model.DeviceCount)",
            设备维护费用 = TP("value(model.年化率 * self.总固定维护成本 + self.总可变维护成本年化)"),
            )
        )
        %}
    {% endif %}
    {% if devName in simDevParamMapping.keys()%}
        {% if len(simDevParamMapping[devName]) == 0%}
            {% error "设备'{}'的独有参数未设置".format(devName)%}
        {% endif%}
        {% for k, v in simDevParamMapping[devName]%}
            {% if k in commonParamNames%}
                {%error("设备'{}'的参数'{}'不是独有参数".format(devName, k))%}
            {% endif%}
            {% do obj.update({k = v}) %}
        {% endfor%}
    {% else%}
        {% error "设备'{}'没有独有参数".format(devName)%}
    {% endif%}
        return {{devName}}仿真结果(
    {% for key, value in obj.items() %}
            {{key}} = {{value}},
    {% endfor %}
        )
{% endfor %}

{% for devName, paramDict in main_data['设备出力曲线'].items() %}
class {{devName}}出力曲线(BaseModel):
{{iterParamDict(paramDict, True)}}

{% endfor %}